[
    {
        "id": "d30f86340f610285",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a03c0d2416f8ec45",
        "type": "tab",
        "label": "deprecated flows",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16b5753bd4d1f0a0",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8cb1c5cd55e7b8a6",
        "type": "tab",
        "label": "Template preservation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5db8c354f2e727e2",
        "type": "tab",
        "label": "My Tasks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a85e26e9e901c14b",
        "type": "tab",
        "label": "crontinject",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c0526da0e6440e34",
        "type": "subflow",
        "name": "Check User",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "6d08d10c1be25c20"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 120,
                "wires": [
                    {
                        "id": "ff4acf22a16d221b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-user-secret"
    },
    {
        "id": "07d474b8a173dcca",
        "type": "subflow",
        "name": "Has Admin",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 60,
                "wires": [
                    {
                        "id": "db5cc39c329c8152"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 60,
                "wires": [
                    {
                        "id": "db5cc39c329c8152",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E9967A",
        "icon": "font-awesome/fa-user-o"
    },
    {
        "id": "05e1edea3a8699f2",
        "type": "subflow",
        "name": "Has Admin 2.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 200,
                "wires": [
                    {
                        "id": "9fee8105a19ced08"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 180,
                "wires": [
                    {
                        "id": "9fee8105a19ced08",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 240,
                "wires": [
                    {
                        "id": "9fee8105a19ced08",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "icon": "font-awesome/fa-user-circle"
    },
    {
        "id": "1c790cf32d0ec66f",
        "type": "mongodb4-client",
        "name": "TODO DB",
        "protocol": "mongodb",
        "hostname": "localhost",
        "port": "27017",
        "dbName": "todoApp",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "8296e086c16a0370",
        "type": "jwt verify",
        "z": "c0526da0e6440e34",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": " peacesign",
        "key": "",
        "signvar": "token",
        "storetoken": "token",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "ff4acf22a16d221b"
            ]
        ]
    },
    {
        "id": "6d08d10c1be25c20",
        "type": "function",
        "z": "c0526da0e6440e34",
        "name": "function 6",
        "func": "msg.token = msg.req.cookies.token || \"\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 120,
        "wires": [
            [
                "8296e086c16a0370"
            ]
        ]
    },
    {
        "id": "ff4acf22a16d221b",
        "type": "function",
        "z": "c0526da0e6440e34",
        "name": "function 7",
        "func": "if(!msg.token || msg.token.ip !==msg.req.ip){\n\n    msg.payload.success = true\n    msg.payload.redirectUrl = \"/log-in-screen\"\n\n    return [null,null,msg]\n}\nmsg.user = msg.token\nreturn msg;",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 120,
        "wires": [
            [],
            [
                "cfec836e45f65276"
            ],
            [
                "c9f7a50d2b182c0d"
            ]
        ]
    },
    {
        "id": "cfec836e45f65276",
        "type": "http response",
        "z": "c0526da0e6440e34",
        "name": "200",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 180,
        "wires": []
    },
    {
        "id": "c9f7a50d2b182c0d",
        "type": "http response",
        "z": "c0526da0e6440e34",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/log-in-screen"
        },
        "x": 820,
        "y": 280,
        "wires": []
    },
    {
        "id": "fb57eb46c4384318",
        "type": "catch",
        "z": "c0526da0e6440e34",
        "name": "",
        "scope": [
            "8296e086c16a0370"
        ],
        "uncaught": false,
        "x": 450,
        "y": 60,
        "wires": [
            [
                "ff4acf22a16d221b"
            ]
        ]
    },
    {
        "id": "db5cc39c329c8152",
        "type": "function",
        "z": "07d474b8a173dcca",
        "name": "function 9",
        "func": "if(msg.user && msg.user.role && msg.user.role.includes(\"Simiabraz\")) return msg;\n\n\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 60,
        "wires": [
            [],
            [
                "24fcf1b33aaf4c9f"
            ]
        ]
    },
    {
        "id": "24fcf1b33aaf4c9f",
        "type": "http response",
        "z": "07d474b8a173dcca",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/log-in-screen"
        },
        "x": 580,
        "y": 140,
        "wires": []
    },
    {
        "id": "9fee8105a19ced08",
        "type": "function",
        "z": "05e1edea3a8699f2",
        "name": "function 10",
        "func": "if(msg.user && msg.user.role && msg.user.role.includes(\"Simiabraz\")) return msg;\n\n\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a9fdb53338e43b97",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "Main UI",
        "url": "/",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 280,
        "wires": [
            [
                "fc70af5ee99198cc"
            ]
        ]
    },
    {
        "id": "6d306d8c46512ff1",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 280,
        "wires": []
    },
    {
        "id": "3f65cceaf7c52cfb",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "db.todo.find()",
        "func": "let query = msg.user.role.includes(\"Simiabraz\") ? {} : {\n    \"user_id\": msg.user.user_id\n}\nmsg.payload = [[\n    {\n        $match: query\n    },\n    {\n        $sort: {\n            \"stamp.createdAt\": -1\n        }\n    },\n    {\n        $addFields: {\n            hasAdmin: {\n                $cond: [{ $eq: [\"$role\", \"Simiabraz\"] }, true, false]\n            }\n        }\n    }\n]]\n\n// const DB = global.get(\"DB\")\n// msg.payload = DB.todo.filter(x => x.stamp.user_id === msg.user.user_id || msg.user.role.includes('Simiabraz')).sort((a,b) => b.stamp.CreatedAt - a.stamp.CreatedAt );\n// msg.payload_json = JSON.stringify(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "e9111a1400075747"
            ]
        ]
    },
    {
        "id": "6174979e5eaf9458",
        "type": "link in",
        "z": "d30f86340f610285",
        "name": "link in 1",
        "links": [
            "863b0a0285ecdc3c",
            "e9612ac162761d79",
            "5a9e7156ac61d720",
            "120bde15a98516bb",
            "b4551f1736463831",
            "adaa3a2c6da233fc",
            "42535bcf00b6ca99",
            "36fab97027d40c64",
            "091d45602778ce5e",
            "a08264d85944eadd",
            "38c8786949af7aca",
            "2dd20b4d491506a2",
            "f0a1fb809bc146a2",
            "6253d6033a0d4bf4",
            "35c3fae8b2b050ff",
            "79d0853edc7a3678",
            "83d43d6a896051e6",
            "9b825b0b037428d6"
        ],
        "x": 285,
        "y": 240,
        "wires": [
            [
                "3f65cceaf7c52cfb"
            ]
        ]
    },
    {
        "id": "de3c2916f6f27cdd",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "operation",
        "url": "/operation/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 400,
        "wires": [
            [
                "77dcab94891a6c1e"
            ]
        ]
    },
    {
        "id": "b487e39626ca3642",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "validation",
        "func": "const typeLookup={\n    deleteTask : {\n        title: \"delete\",\n        rqA: \"id\"\n    },\n    complete : {\n        title: \"complete\",\n        rqA: \"id\"\n    },\n    incomplete : {\n        title: \"incomplete\",\n        rqA: \"id\"\n    }, \n    add : {\n        title: \"add\",\n        rqA: \"name\"\n    },\n    updateTask:{\n        title:\"update\",\n        rqA:\"id\"\n    },\n    reminder:{\n        title:\"set reminder\",\n        rqA:\"id\"\n    }\n}\n\nif(msg.payload.reminder_date){\n    const date = new Date();\n    let errflag = false;\n    let errmessage = \"\";\n    const taskDeadline = new Date(msg.payload.task_deadline);\n    const reminderDate = new Date(msg.payload.reminder_date);\n    if(taskDeadline.toString() === \"Invalid Date\" || reminderDate.toString()==='Invalid Date')\n    {\n        msg.error = {\n            message: \"Deadline or reminder contains invalid date or time [1].\"\n        }\n        msg.payload.error = msg.error.message;\n        return [null, msg]\n    }\n    switch (true) {\n        case reminderDate > taskDeadline:\n            errflag = true;\n            errmessage = \"You cannot set a reminder that exceeds the deadline [2].\";\n            break;\n        case reminderDate < date:\n            errflag = true;\n            errmessage = \"You cannot set a reminder in the past [3].\";\n            break;\n        case taskDeadline < date:\n            errflag = true;\n            errmessage = \"You cannot set a deadline in the past [4].\";\n            break;\n        default:\n            break;\n    }\n    if(errflag){\n        msg.error = {\n            message: \"Deadline or reminder contains invalid date or time [5]. \" + errmessage\n        }\n        msg.payload.error = msg.error.message;\n        return [null, msg];\n    }\n    msg.from = \"noreply <noreply@emirhan>\"\n    msg.reminder_date = reminderDate;\n}\n\nif(!Object.keys(typeLookup).includes(msg.req.params.type)){\n    msg.error = {\n        message: `Request Type Error: ${msg.req.params.type}. \\n Unsupported request type. `\n    }\n    msg.payload.error=msg.error.message;\n    return [null,msg]\n}\n\nif(!msg.payload[typeLookup[msg.req.params.type].rqA]){\n    msg.error = {\n        message: `The task you wanted to ${typeLookup[msg.req.params.type].title} must have an/a ${typeLookup[msg.req.params.type].rqA}.`\n    }\n    msg.payload.error = msg.error.message;\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "edf78bca85b5d71b"
            ],
            [
                "38c8786949af7aca"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "edf78bca85b5d71b",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "db.todo.handler()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst date = new Date();\nconst now = date.getTime();\nmsg.formData = msg.payload\n\nif(msg.req.params.type === 'add'){\n    msg.payload ={\n        _id:now,\n        id: now,\n        name: msg.formData.name,\n        done: false,\n        user_id:msg.user.user_id,\n        username:msg.user.username,\n        stamp: {\n            CreatedAt: now,\n            ip: msg.req.ip,\n            user_id : msg.user.user_id || \"\",\n            username: msg.user.username || \"\",\n            email: msg.user.email || \"\",\n        },\n        date : date.toLocaleDateString(),\n        time : date.toLocaleTimeString()\n    }\n    return msg;\n}\n\nconst idAsNumber = parseFloat(msg.formData.id);\n\n// 2. Set msg.payload to be a query OBJECT with the number\n// msg.payload = {\n//     _id: idAsNumber \n// };\n\nmsg.payload = {\n    _id: idAsNumber \n}\n\nreturn [null,msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "7bde36ceb6999a53"
            ],
            [
                "f4fa6f1adf4d5283"
            ]
        ],
        "outputLabels": [
            "handler",
            "Error"
        ]
    },
    {
        "id": "35f6cf6ab32890d3",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 960,
        "y": 360,
        "wires": []
    },
    {
        "id": "38c8786949af7aca",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "6174979e5eaf9458"
        ],
        "x": 515,
        "y": 440,
        "wires": []
    },
    {
        "id": "8977c43faa8ac5b1",
        "type": "template",
        "z": "d30f86340f610285",
        "name": "MainTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <!-- Jquery -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"\n        integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/solid-dark.min.js\"></script>\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n    </style>\n    <script>\n        const taskDataPayload = JSON.parse('{{{payload_json}}}');\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/operation/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Add New Task\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details</th>\n                                <!-- <th>Kategoriler</th> -->\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n  \n                            {{#payload}}\n                            <tr>\n                                <td class=\"{{#done}}text-decoration-line-through{{/done}}\">{{name}}{{#categories}}<br><span class=\"badge bg-warning\"><i class=\"bi bi-tag-fill\"></i>{{categories}}</span>{{/categories}}</td>\n                                <td><span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> {{date}},{{time}}</span>\n                                </td>\n                                <td align=\"right\">\n\n                                    <button\n                                            class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                            data-id=\"{{id}}\"\n                                            data-done=\"{{done}}\">\n                                            <i class=\"bi bi-three-dots-vertical\"></i>\n                                        </button>\n                                </td>\n                            </tr>\n                            {{/payload}}\n                            {{^payload}}\n                            <tr>\n                                <td class=\"text-muted\" colspan=\"4\">Henüz Task yok</td>\n                            </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Update</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n    <div class=\"postion-relative\">\n        <div class=\"btn-group btn-lg position-fixed bottom-0 end-0 m-5 shadow\">\n            <button class=\"btn btn-light\">{{user.username}}</button>\n            <a href=\"/user-ops/logout\" class=\"btn btn-danger\"><i class=\"bi bi-box-arrow-right\"></i></a>\n        </div>\n        <!-- <a href=\"/user-management\" class=\" btn btn-danger btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-person-circle\"></i></a> -->\n    \n    </div>\n\n\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n  \n                <input type=\"hidden\" name=\"id\" value=\"\" class=\"popover-id-input\" />\n\n                <!-- Group of buttons to show when the task is DONE -->\n                <div class=\"done-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/operation/incomplete\" class=\"btn btn-outline-warning\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Mark As Incomplete\"><i class=\"bi bi-x-square\"></i></button>\n                </div>\n\n                <!-- Group of buttons to show when the task is NOT DONE -->\n                <div class=\"not-done-buttons\" style=\"display: contents;\">\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"id\" value=\"\" onclick=\"update_Task(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-secondary btn-reminder\" name=\"id\" value=\"\" onclick=\"set_reminder(this.value,this)\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\" data-bs-placement=\"top\" data-bs-title=\"Set Reminder\"><i class=\"bi bi-bell\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-info btn-categories\" data-bs-toggle=\"modal\" name=\"id\" value=\"\" onclick=\"taskCategories(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Categories\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-tag-fill\"></i></button>\n                    <button type=\"submit\" formaction=\"/operation/complete\" class=\"btn btn-outline-success\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Complete Task\"><i class=\"bi bi-check2-square\"></i></button>\n                </div>\n\n                <!-- This button is always shown inside the popover -->\n                <button type=\"submit\" formaction=\"/operation/deleteTask\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Task\"><i class=\"bi bi-trash3\"></i></button>\n            </form>\n        </div>\n    </template>\n\n    <template id=\"categorytemplate\">\n        <div>\n            <form action=\"/categories/add-cat\" method=\"POST\">\n                <div class=\"input-group input-group-lg mt-5\">\n                    <input required type=\"text\" name=\"catname\" value=\"\" class=\"form-control\" placeholder=\"Kategori Ekle\" />\n                    <input required type=\"hidden\" name=\"id\" value=\"\" id=\"add-cat-main-id\" />\n                    <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n                </div>\n            </form>\n            \n            <!-- CATEGORY LIST TABLE -->\n            <div class=\"table-responsive mt-5 border rounded\">\n                <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                    <thead>\n                        <tr>\n                            <th>Categories</th>\n                            <th style=\"text-align: right;\">Actions</th>\n                        </tr>\n                    </thead>\n                    <!-- This table body will be filled by our JavaScript -->\n                    <tbody id=\"category-table-body\">\n                        <!-- JavaScript will fill this -->\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </template>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n    <script>\n        // remove popovers\n        \n            \n\n    </script>\n<!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element\n\n\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n        \n        themeToggleButton.addEventListener('click', () => {\n\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n    <script>\n\n        document.addEventListener('DOMContentLoaded', () => {\n\n            const popoverTemplate = document.getElementById('popover-template');\n\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n \n                const itemId = popoverTriggerEl.dataset.id;\n                const isDone = popoverTriggerEl.dataset.done === 'true';\n    \n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    trigger: 'click manual',\n\n                    content: function () {\n\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n                        \n\n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n                        let reminderbtn = contentElement.querySelector('.btn-reminder');\n                        let categoriesbtn = contentElement.querySelector('.btn-categories');\n                        categoriesbtn.value = itemId;\n                        reminderbtn.value = itemId;\n                        const categories_tooltip = new bootstrap.Tooltip(categoriesbtn)\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n                        const reminder_tooltip =new bootstrap.Tooltip(reminderbtn);\n\n\n                        if (isDone) {\n                            contentElement.querySelector('.not-done-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.done-buttons').remove();\n                        }\n\n\n                        return contentElement;\n                    }\n                });\n                \n\n                // Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        \n        function update_Task(num,obj){\n            const info = {\n                id : num\n            }\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            \n            modal_title.innerText=\"Update\";\n            modalupdate.setAttribute('value', num);\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n            // let popoverList = document.querySelectorAll(\".popover\");\n            // popoverList.forEach(popover =>{\n            //     popover.hide();\n            // });\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            survey.setValue('id',num);\n            // survey.setValue('new_task_id',num);\n            survey.setValue('new_task_name',object_in_q.name);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            survey.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            survey.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            survey.render(document.getElementById(\"surveyContainer\"));\n            \n            \n        };\n\n\n        function taskCategories(num, obj) {\n            const info = {\n                id: num\n            };\n            \n            // 1. Get all the modal elements\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            let modal_body = document.querySelector('.modal-body');\n            const originalModalBodyHTML = modal_body.innerHTML;\n            \n            modalupdate.addEventListener('hidden.bs.modal', () => {\n                modal_body.innerHTML = originalModalBodyHTML;\n            \n            }, { once: true });\n            \n            modal_title.innerText = \"Categories\";\n            modalupdate.setAttribute('value', num);\n\n            document.querySelectorAll('.options-popover-btn').forEach(option_button => {\n                if (option_button.getAttribute(\"aria-describedby\")) {\n                option_button.click();\n                }\n            });\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n                tooltipList.forEach(tooltip => {\n                tooltip.remove();\n            });\n\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            const categories = object_in_q.categories || [];\n\n            let categorytemplate = document.getElementById('categorytemplate');\n            modal_body.innerHTML = categorytemplate.innerHTML;\n\n            let addCatIdInput = modal_body.querySelector('#add-cat-main-id');\n            let tableBody = modal_body.querySelector('#category-table-body');\n\n            if (addCatIdInput) {\n                addCatIdInput.value = object_in_q.id;\n            }\n            \n            if (tableBody) {\n                if (!categories || categories.length === 0) {\n                    const noCatRow = `\n                        <tr>\n                            <td class=\"text-muted\" colspan=\"2\">Henüz Kategori yok</td>\n                        </tr>\n                    `;\n                    tableBody.innerHTML = noCatRow;\n                } else {\n\n                    let allRowsHtml = '';\n                    \n\n                    const sanitize = (str) => {\n                        const temp = document.createElement('div');\n                        temp.textContent = str;\n                        return temp.innerHTML;\n                    };\n                    \n                    for (const item of categories) {\n\n                        const safeCatName = sanitize(item);\n                        const safeMainId = sanitize(object_in_q.id);\n                        \n                        const rowHtml = `\n                        <tr>\n                            <td>${safeCatName}</td>\n                            <td align=\"right\">\n                                <div class=\"btn-group\">\n                                    <form method=\"POST\" style=\"display: contents;\">\n                                        <input type=\"hidden\" name=\"catname\" value=\"${safeCatName}\" />\n                                        <input type=\"hidden\" name=\"id\" value=\"${safeMainId}\" />\n                                        <button type.\n                        =\"submit\" formaction=\"/categories/delete-cat\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Category\">\n                                                                <i class=\"bi bi-trash3\"></i>\n                                                            </button>\n                                    </form>\n                                </div>\n                            </td>\n                        </tr>\n                        `;\n                        allRowsHtml += rowHtml;\n                    }\n\n                    tableBody.innerHTML = allRowsHtml;\n                    \n                    // 10. Initialize new tooltips\n                    const tooltipTriggerList = tableBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                    [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n                }\n            } else {\n                console.error(\"Could not find #category-table-body inside the modal.\");\n            }\n        }\n        \n        document.addEventListener('DOMContentLoaded', ()=>{\n            document.querySelector('.btn-close').addEventListener('click', ()=>{\n                close_task_update_window();\n            });\n            function close_task_update_window(){\n                survey.clear();\n            };\n        });\n\n        async function sendTaskUpdate(sender){\n\n            const surveyData = sender.data;\n            // console.log(\"id \",typeof surveyData.id);\n            // console.log(\"new_task_id \",typeof surveyData.new_task_id);\n            // console.log(\"new_task_name: \",typeof surveyData.new_task_name);\n\n            const url = '/operation/updateTask';\n            \n \n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n            'fetchflag':true,\n            'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify(surveyData)\n            });\n            \n            if (response.ok) {\n                console.log(\"Task updated successfully!\");\n                console.log(response);\n                console.log(response.ok);\n                location.reload();\n\n            } else {\n                console.error(\"Failed to update task.\");\n            }\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        };\n\n        function set_reminder(num,obj){\n            let modalreminder = document.getElementById('staticBackdrop');\n            let modal_title = document.querySelector('.modal-title');\n            // modal_body.innerHTML =`<div id=\"surveyContainer\"></div>`;\n            modal_title.innerText=\"Set Reminder\";\n            modalreminder.setAttribute('value', num);\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            reminder.render(document.getElementById(\"surveyContainer\"));\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            let default_reminder = (object_in_q.reminder) ? object_in_q.reminder : null;\n            let default_deadline = (object_in_q.deadline) ? object_in_q.deadline : null ;\n            switch (default_reminder){\n                case object_in_q.reminder:\n                    default_reminder = getFormattedDateTimeLocal(new Date(default_reminder));\n                    reminder.setValue('reminder_date',default_reminder);\n                    break;\n                case null :\n                    reminder.clear();\n                    break;\n            }\n            switch (default_deadline){\n                case object_in_q.deadline:\n                    default_deadline = getFormattedDateTimeLocal(new Date(default_deadline));\n                    reminder.setValue('task_deadline',default_deadline);\n                    break;\n                case null :\n                    reminder.clear();\n                    break;\n            }\n            reminder.setValue('id',num);\n            \n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            reminder.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            reminder.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            \n\n        }\n\n        async function sendTaskReminder(sender){\n            console.log(\"Reminder Set:\", JSON.stringify(sender.data, null, 2));\n            sender.completedHtml = \"<h3>Reminder has been set successfully!</h3>\";\n            /**/\n\n            const surveyData = sender.data;\n            console.log(\"id \",typeof surveyData.id);\n            console.log(\"task_deadline \",typeof surveyData.task_deadline);\n            console.log(\"reminder_date: \",typeof surveyData.reminder_date);\n\n            const url = '/operation/reminder';\n            \n            // Use fetch to send a POST request\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n            'fetchflag':true,\n            'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify(surveyData)\n            });\n            \n            if (response.ok) {\n            console.log(\"Reminder Set successfully!\");\n            console.log(response);\n            console.log(response.ok);\n            location.reload();\n            \n\n            } else {\n            console.error(\"Failed to update task.\");\n            }\n            } catch (error) {\n            console.error(\"Error sending survey data:\", error);\n            };\n\n            document.querySelector('.btn-close').click();\n            location.reload();\n        }\n\n        \n    </script>\n\n    \n    \n    <script>\n\n        const surveyJson = {\n            pages: [{\n                name: \"PersonalDetails\",\n                title:\"Update\",\n                elements: [{\n                    name: \"id\", \n                    type: \"text\", \n                    inputType: \"numeric\",\n                    visible: false, \n                    isRequired:true\n                    },//{\n                    // type: \"text\",\n                    // name: \"new_task_id\",\n                    // inputType: \"numeric\",\n                    // title: \"Enter New Task ID:\",\n                    // \"validators\": [\n                    //     { \"type\": \"numeric\", \"text\": \"Value must be a number\" }\n                    // ]},\n                    {\n                    type: \"text\",\n                    inputType: \"text\",\n                    name: \"new_task_name\",\n                    title: \"New Task Name:\"\n                    }]\n            }]\n        };\n            \n        const survey = new Survey.Model(surveyJson);\n        survey.applyTheme(SurveyTheme.DefaultDark);\n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendTaskUpdate);\n        \n    </script>\n\n    <!-- reminder setting modal -->\n    <script>\n        function getFormattedDateTimeLocal(date) {\n            const year = date.getFullYear();\n            const month = (date.getMonth() + 1).toString().padStart(2, '0');\n            const day = date.getDate().toString().padStart(2, '0');\n            const hours = date.getHours().toString().padStart(2, '0');\n            const minutes = date.getMinutes().toString().padStart(2, '0');\n            return `${year}-${month}-${day}T${hours}:${minutes}`;\n        }\n\n        const today = new Date();\n\n        const reminderScreen = {\n            // \"title\": \"Task Reminder Setup\",\n            \"elements\": [\n                {\n                \"name\": \"id\", \n                \"type\": \"text\", \n                \"inputType\": \"numeric\",\n                \"visible\": false, \n                \"isRequired\":true\n                },\n                {\n                    \"name\": \"task_deadline\",\n                    \"type\": \"text\",\n                    \"inputType\": \"datetime-local\", \n                    \"title\": \"1. Select the task deadline (date and time):\",\n                    \"placeholder\": \"yyyy-mm-ddThh:mm\",\n                    \"min\": getFormattedDateTimeLocal(today), \n                    \"isRequired\": true\n                },\n                {\n                    \"name\": \"reminder_date\",\n                    \"type\": \"text\",\n                    \"inputType\": \"datetime-local\", \n                    \"title\": \"2. Set a reminder date (date and time):\",\n                    \"description\": \"You can only select a date and time before the deadline.\",\n                    \"isRequired\": true,\n                    \"min\": getFormattedDateTimeLocal(today) \n                    \n                }\n            ]\n        };\n\n        const reminder = new Survey.Model(reminderScreen);\n\n\n        reminder.onValueChanged.add((sender, options) => {\n  \n            if (options.name === 'task_deadline') {\n                const deadline = options.value; \n                const reminderQuestion = sender.getQuestionByName('reminder_date');\n\n                if (reminderQuestion) {\n                    if (deadline) {\n                        // --- THE CORE LOGIC ---\n                        // Set the maximum allowed reminder datetime to be the deadline.\n                        // String comparison works correctly for the \"YYYY-MM-DDTHH:mm\" format.\n                        reminderQuestion.max = deadline;\n\n                        // Now, check if the current reminder is still valid.\n                        const currentReminder = sender.getValue('reminder_date');\n                        if (currentReminder && currentReminder >= deadline) {\n                            // If the reminder is now invalid, clear it to force a new selection.\n                            sender.setValue('reminder_date', null);\n                        }\n                    } else {\n                        // If the deadline is cleared, remove the max constraint from the reminder.\n                        reminderQuestion.max = null;\n                    }\n                }\n            }\n        });\n        \n\n        reminder.onComplete.add(sendTaskReminder);\n\n        reminder.focusFirstQuestionAutomatic = false;\n        reminder.clearInvisibleValues = \"none\";\n\n        // reminder.render(document.getElementById(\"surveyContainer\"));\n        \n            \n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 1100,
        "y": 280,
        "wires": [
            [
                "6d306d8c46512ff1"
            ]
        ]
    },
    {
        "id": "9b054860e25c5872",
        "type": "e-mail",
        "z": "d30f86340f610285",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "emirgormus2555@gmail.com",
        "dname": "emailer",
        "x": 1700,
        "y": 500,
        "wires": []
    },
    {
        "id": "1fa883b5a97f131c",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "user management operation",
        "url": "/user-management/admin-ops/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "11f67dd889512261",
                "1becad322576993c"
            ]
        ]
    },
    {
        "id": "ebdb04b353b61d68",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "validation",
        "func": "const typeLookup={\n    \"delete-user\" : {\n        title: \"delete-user\",\n        rqA: \"user_id\"\n    },\n    \"activate-user\" : {\n        title: \"activate-user\",\n        rqA: \"user_id\"\n    },\n    \"deactivate-user\" : {\n        title: \"deactivate-user\",\n        rqA: \"user_id\"\n    }, \n    \"add-user\" : {\n        title: \"add-user\",\n        rqA: [\"password\", \"username\", \"role\"]\n    },\n    \"update-user\":{\n        title:\"update-user\",\n        rqA: [\"user_id\",\"password\",\"username\", \"role\"]\n            \n    }\n}\n\n\nconst validateEmail = (email) => {\n    const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return emailRegex.test(email);\n};\n\nif(msg.payload.email){\n    \n    \n    if (!validateEmail(msg.payload.email)) {\n        msg.payload.error = \"A valid email address is required.\";\n        msg.error={\n            message : msg.payload.error\n        }\n        return [null, msg]; \n    }\n}\n\nif(!Object.keys(typeLookup).includes(msg.req.params.type)){\n    msg.error = {\n        message: `Request Type Error: ${msg.req.params.type}. \\n Unsupported request type.`\n    }\n    return [null,msg]\n}\n\nconst requiredArgs = typeLookup[msg.req.params.type].rqA;\nconst argsAsArray = Array.isArray(requiredArgs) ? requiredArgs : [requiredArgs];\n\nif (!argsAsArray.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `The operation requires the following fields: ${argsAsArray.join(', ')}.`\n    };\n    msg.payload.error = msg.error.message;\n    return [null, msg];\n}\n\nmsg.formData = msg.payload;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 880,
        "wires": [
            [
                "be373d8c6685368c",
                "011722a3700b7988"
            ],
            [
                "faae73a3e073ddd7",
                "9b36b2dacabc2bcd"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "be373d8c6685368c",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "validated req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 880,
        "wires": []
    },
    {
        "id": "11f67dd889512261",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "req received user management",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 940,
        "wires": []
    },
    {
        "id": "faae73a3e073ddd7",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "err 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 980,
        "wires": []
    },
    {
        "id": "3402dced3a1ca4e5",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "3edd930c0aa7b137"
        ],
        "x": 1045,
        "y": 940,
        "wires": []
    },
    {
        "id": "3edd930c0aa7b137",
        "type": "link in",
        "z": "d30f86340f610285",
        "name": "link in 4",
        "links": [
            "3402dced3a1ca4e5",
            "99cffbfe61789051",
            "43f895985345eb90",
            "51579c1ef6e98903",
            "aca642fcd90f5226"
        ],
        "x": 485,
        "y": 680,
        "wires": [
            [
                "5572cb20a9c57e8e"
            ]
        ]
    },
    {
        "id": "15f7d4de4bb162e9",
        "type": "bcrypt",
        "z": "d30f86340f610285",
        "name": "",
        "action": "encrypt",
        "field": "formData.password",
        "hash": "payload",
        "target": "formData.password",
        "assignment": "assign",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 1510,
        "y": 740,
        "wires": [
            [
                "28d7bca133919890"
            ]
        ]
    },
    {
        "id": "b74b99cbc716a861",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "log-in-screen",
        "url": "/log-in-screen",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 1060,
        "wires": [
            [
                "66b1027c1b9dd81c"
            ]
        ]
    },
    {
        "id": "4b89e43e230c126f",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 1060,
        "wires": []
    },
    {
        "id": "66b1027c1b9dd81c",
        "type": "template",
        "z": "d30f86340f610285",
        "name": "LoginScreen",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User-List</title>\n    <!-- Jquery -->\n    <script src=\"/js/jquery.min.js\"></script>\n    <!-- Using CDN for bootstrap for this example to work standalone -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/solid-dark.min.js\"></script>\n    <!-- ... -->\n    <style>\n        .dark-hover {\n            background-color: #212529;\n            color: white;\n        }\n    \n        .dark-hover:hover {\n            background-color: white;\n            color: black;\n        }\n    \n        #surveyContainer {\n        padding: 20px;\n        }\n        \n        .sv-root-modern, .sd-root-modern {\n        max-width: 500px;\n        margin: 0 auto;\n        }\n        .shrink-to-content {\n        width: fit-content;\n        background-color: lightblue;\n        padding: 10px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row \">\n            <div class=\"col-md-6 offset-md-4 mt-1 mb-5\"\n                style=\"max-width: 500px; text-align:center;\">\n                <div class=\"p-3 text-danger-emphasis bg-danger-subtle border border-danger-subtle rounded-3\" style=\"display:none;\"\n                    id=\"err_msg_container\"></div>\n                <div class=\"p-3 text-primary-emphasis bg-primary-subtle border border-primary-subtle rounded-3\" style=\"display:none;\"\n                    id=\"suc_msg_container\"></div>\n            </div>\n        </div>\n        <div class=\"row \">\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            \n            <div class=\"col-md-6 offset-md-4 snaders mt-5 mb-5\" style=\"background-color:#e7f0ff; max-width: 500px; text-align:center; border-radius:30px;\">\n                \n                <div id=\"surveyContainer\"></div>\n                <div class=\"mb-3\">\n                    <button class=\"btn btn-outline-primary mb-2\" type=\"button\" id=\"sign_log\">Don't have an account? Sign-up</button>\n                    <button class=\"btn btn-outline-primary mb-2\" type=\"button\" id=\"forgot\">Frogot Password?</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n\n    <script>\n                const sign_log_btn = $('#sign_log');\n                let survey_flag = true;\n                const forgot_btn = $('#forgot')\n                const sign_up_text = \"Don't have an account? Sign-up\";\n                const sign_in_text = \"Already have an account? Sign-in\";\n                sign_log_btn.on('click', ()=>{\n                    survey_flag = (survey_flag) ? false : true;\n                    (survey_flag) ? survey.render(document.getElementById(\"surveyContainer\")) : surveyup.render(document.getElementById(\"surveyContainer\"));\n                    sign_log_btn.text((survey_flag) ? sign_up_text : sign_in_text);\n                    (survey_flag) ? forgot_btn.css(\"display\",\"inline\") : forgot_btn.css(\"display\",\"none\");\n                    console.log(survey_flag)\n                })\n\n                forgot_btn.on('click', ()=>{\n                    survey_reset.render(document.getElementById(\"surveyContainer\"));\n                    survey_flag = false;\n                    sign_log_btn.text(\"Back to login\");\n\n                })\n    </script>\n\n\n    <!-- updateHandler -->\n    <script>\n        \n\n        async function sendData(sender){\n            \n            sender.completedHtml = (survey_flag) ? \"<h3>Logging In</h3>\" : \"<h3>Signing Up</h3>\" ;\n            let surveyData = {\n                username : sender.data.username,\n                password : sender.data.password,\n                email : sender.data.email\n            };\n\n\n            let url = (survey_flag) ? '/log-in-screen/login' : '/log-in-screen/signup';\n            \n            // Use fetch to send a POST request\n            try {\n                let response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        // This header is crucial to tell Node-RED you're sending JSON\n                        \n                        'Content-Type': 'application/json'\n                    },\n                    // Convert the JavaScript object to a JSON string for the request body\n                    body: JSON.stringify(surveyData)\n                });\n                console.log(await response)\n                const response_data = await response.json();\n                if (response.ok) {\n                    // location.reload();\n                    //redirect\n                    if(response_data.message){\n                        $('#suc_msg_container').text(response_data.message)\n                        $('#suc_msg_container').css('display','inline')\n                    }\n                    if(survey_flag){\n                        if (response_data.success && response_data.redirectUrl) {\n                        // ...manually redirect the browser to that URL.\n                        window.location.href = response_data.redirectUrl;\n                        }\n                    }else{\n                        setTimeout(() => {\n                        window.location.href = \"/log-in-screen\";\n                        }, 2000);\n                    }\n                    \n\n                } else{\n                    console.log(\"error\")\n                    $('#err_msg_container').text(response_data.error)\n                    $('#err_msg_container').css('display','inline')\n\n                    survey.clear()\n                    surveyup.clear()\n                }\n\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            \n        };\n\n        async function reset_password(sender){\n            console.log(sender.data);\n            let surveyDate = sender.data;\n\n            let url = '/log-in-screen/reset';\n            \n            // Use fetch to send a POST request\n            try {\n                let response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        // This header is crucial to tell Node-RED you're sending JSON\n                        'Content-Type': 'application/json'\n                    },\n                    // Convert the JavaScript object to a JSON string for the request body\n                    body: JSON.stringify(surveyData)\n                });\n                console.log(await response)\n                if (response.ok) {\n                    console.log(\"Password reset successful!\");\n                    console.log(response);\n                    console.log(\"respones is ok : \", response.ok);\n                    // location.reload();\n                    // here goes a redirect\n                    console.log(response.text())\n                } else{\n                    console.error(\"Failed to update task.\");\n                    console.log(response.body)\n                }\n\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n\n        }\n\n\n    </script>\n\n    <script>\n        const sign_in_survey = {\n            pages: [{\n                title: \"Log-in\",\n                name: \"Sign In\",\n                elements: [\n                    {\n                        type: \"text\",\n                        name: \"username\",\n                        \"isRequired\": true,\n                        inputType: \"text\",\n                        title: \"Username:\",\n                    },\n                    {\n                        \"type\": \"text\",\n                        \"name\": \"password\",\n                        \"title\": \"Password\",\n                        \"inputType\": \"password\", \n                        \"isRequired\": true\n                    }]\n            }]\n        };\n        const sign_up_survey = {\n            pages: [{\n                \"title\": \"Sign-up\",\n                name: \"Sign Up\",\n                elements: [\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        name: \"email\",\n                        title: \"E-mail\",\n                        isRequired: true,\n                        validators: [\n                            { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                        ]\n                    },\n                    {\n                        type: \"text\",\n                        name: \"username\",\n                        \"isRequired\": true,\n                        inputType: \"text\",\n                        title: \"Enter New Username:\",\n                    },\n                    {\n                        \"type\": \"text\",\n                        \"name\": \"password\",\n                        \"title\": \"Password\",\n                        \"inputType\": \"password\", \n                        \"isRequired\": true\n                    },\n                    {\n                        \"type\": \"text\",\n                        \"name\": \"password_confirm\",\n                        \"title\": \"Confirm Password\",\n                        \"inputType\": \"password\",\n                        \"isRequired\": true,\n                        \"validators\": [\n                            {\n                                \"type\": \"expression\",\n                                // The expression compares the value of this question ('password_confirm')\n                                // with the value of the 'password' question.\n                                \"expression\": \"{password} == {password_confirm}\",\n                                // This is the error message shown if the expression is false.\n                                \"text\": \"The passwords do not match. Please try again.\"\n                            }\n                        ]\n                    }\n                    ]\n            }]\n        };\n\n        const sruvey_reset_json={\n            pages: [{\n                \"title\": \"Forgot Password\",\n                name: \"Forgot_Password\",\n                elements:[\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        name: \"email\",\n                        title: \"E-mail\",\n                        isRequired: true,\n                        validators: [\n                            { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                        ]\n                    }\n                ]\n            }]\n        };\n        \n        const survey = new Survey.Model(sign_in_survey);\n        \n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendData);\n        survey.fitToContainer = true;\n        \n        \n        const surveyup = new Survey.Model(sign_up_survey);\n        surveyup.focusFirstQuestionAutomatic = false;\n        surveyup.clearInvisibleValues = \"none\";\n        surveyup.onComplete.add(sendData);\n        surveyup.fitToContainer = true;\n        survey.showNavigationButtons = \"bottom\"; // or \"top\"\n        surveyup.showNavigationButtons = \"bottom\";\n\n        const survey_reset = new Survey.Model(sruvey_reset_json);\n        \n        survey_reset.focusFirstQuestionAutomatic = false;\n        survey_reset.clearInvisibleValues = \"none\";\n        survey_reset.onComplete.add(reset_password);\n        survey_reset.fitToContainer = true;\n\n        survey.render(document.getElementById(\"surveyContainer\"));\n    </script>\n    \n    <!-- Dark Mode Light Mode -->\n    <script>\n\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element    \n        \n                (() => {\n                    const savedTheme = localStorage.getItem('theme') || 'light';\n                    themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n                    htmlElement.setAttribute('data-bs-theme', savedTheme);\n                    if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n                    surveyup.applyTheme(SurveyTheme.SolidDark);\n                    survey.applyTheme(SurveyTheme.SolidDark);\n                    survey_reset.applyTheme(SurveyTheme.SolidDark);\n                    $('.snaders').css('background-color', '#26282f');\n\n                    }else {\n                    surveyup.applyTheme(SurveyTheme.BorderlessLight);\n                    survey.applyTheme(SurveyTheme.BorderlessLight);\n                    survey_reset.applyTheme(SurveyTheme.BorderlessLight);\n                    $('.snaders').css('background-color', '#e7f0ff');\n                    };\n                })();\n        \n        \n                \n                themeToggleButton.addEventListener('click', () => {\n        \n                    const currentTheme = htmlElement.getAttribute('data-bs-theme');\n                    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n        \n        \n                    htmlElement.setAttribute('data-bs-theme', newTheme);\n                    if(newTheme ==='dark'){\n                        themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                        themeToggleButton.classList.add('dark-hover');\n                        surveyup.applyTheme(SurveyTheme.SolidDark);\n                        survey.applyTheme(SurveyTheme.SolidDark);\n                        survey_reset.applyTheme(SurveyTheme.SolidDark);\n                        $('.snaders').css('background-color', '#26282f');\n                    }else{\n                        themeToggleButton.classList.remove('dark-hover');\n                        themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n                        surveyup.applyTheme(SurveyTheme.BorderlessLight);\n                        survey.applyTheme(SurveyTheme.BorderlessLight);\n                        $('.snaders').css('background-color', '#e7f0ff');\n                        survey_reset.applyTheme(SurveyTheme.BorderlessLight);\n                    }\n                    \n        \n                    localStorage.setItem('theme', newTheme);\n                });\n    </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 450,
        "y": 1060,
        "wires": [
            [
                "4b89e43e230c126f"
            ]
        ]
    },
    {
        "id": "5e5e85bf30605fe5",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "log-in-screen operations",
        "url": "/log-in-screen/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1200,
        "wires": [
            [
                "cffd4ed2e4c8329c",
                "1850df27b2f1dec3"
            ]
        ]
    },
    {
        "id": "1850df27b2f1dec3",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "validation",
        "func": "const typeLookup={\n    login : {\n        title: \"login\",\n        rqA: [\"username\", \"password\"]\n    },\n    signup : {\n        title: \"signup\",\n        rqA: [\"password\", \"username\",\"email\"]\n    },\n    reset : {\n        title : \"reset\",\n        rqA: \"email\"\n    }\n}\n\n\nif(!Object.keys(typeLookup).includes(msg.req.params.type)){\n    msg.error = {\n        message: `Request Type Error: ${msg.req.params.type}. \\n Unsupported request type.`\n    }\n    return [null, null, null,msg]\n}\n\nconst requiredArgs = typeLookup[msg.req.params.type].rqA;\nconst argsAsArray = Array.isArray(requiredArgs) ? requiredArgs : [requiredArgs];\n\nif (!argsAsArray.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `İşleminiz bu değerleri gerektiriyor: ${argsAsArray.join(', ')}.`\n    };\n    msg.payload.error = `İşleminiz bu değerleri gerektiriyor: ${argsAsArray.join(', ')}.` ;\n    return [null, null, null, msg];\n}\n\nmsg.formData = msg.payload\nmsg.payload = {\n    username: msg.payload.username\n}\n\nif(msg.req.params.type==='login') return [msg,null,null,null];\nif (msg.req.params.type === 'signup') return [null, msg, null, null];\nif (msg.req.params.type === 'reset') return [null, null, msg, null];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1200,
        "wires": [
            [
                "a42e99d199627385",
                "82b5d75578403e26"
            ],
            [
                "7dd594f3066b813f",
                "90e54b350333945d"
            ],
            [],
            [
                "c128a1b3fb57259d"
            ]
        ],
        "outputLabels": [
            "Valid",
            "papajons",
            "",
            "Invalid"
        ]
    },
    {
        "id": "cffd4ed2e4c8329c",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "req received",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 1280,
        "wires": []
    },
    {
        "id": "7dd594f3066b813f",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1240,
        "wires": []
    },
    {
        "id": "179438eb32fa4a3f",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "findUser()",
        "func": "if (!msg.formData.username || !msg.formData.password){\n    msg.payload = {\n        error: 'Invalid Username or Password'\n    }\n    return [null, msg]\n}\n\n\nif (!msg.payload) {\n    msg.error = {\n        message: \"Kullanıcı adı veya parola hatalı.\"\n    }\n    return [null, msg]\n}\n\nmsg.user = msg.payload\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "c06fc110e2773f97",
                "3667062d2280f2d4"
            ],
            [
                "aaa04ceac708adcf"
            ]
        ],
        "outputLabels": [
            "Success",
            "error"
        ]
    },
    {
        "id": "d47090ff8341cf2c",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 5",
        "func": "msg.cookies = {\n    token : msg.token\n}\nmsg.payload.token = msg.token\nmsg.payload.success= true\nmsg.payload.message= \"Login successful!\"\nmsg.payload.redirectUrl= \"/\" \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1200,
        "wires": [
            [
                "937fc290e1c16334",
                "21caa5a5e8b737ea"
            ]
        ]
    },
    {
        "id": "937fc290e1c16334",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1440,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c128a1b3fb57259d",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 520,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c06fc110e2773f97",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1160,
        "wires": []
    },
    {
        "id": "5c892242d518194f",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1160,
        "wires": []
    },
    {
        "id": "21caa5a5e8b737ea",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9cb22c052be8c646",
        "type": "jwt sign",
        "z": "d30f86340f610285",
        "name": "",
        "alg": "HS256",
        "exp": 3600,
        "jwkurl": "",
        "jwkkid": "",
        "secret": " peacesign",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 1100,
        "y": 1200,
        "wires": [
            [
                "d47090ff8341cf2c",
                "5c892242d518194f"
            ]
        ]
    },
    {
        "id": "3667062d2280f2d4",
        "type": "bcrypt",
        "z": "d30f86340f610285",
        "name": "",
        "action": "verify",
        "field": "formData.password",
        "hash": "user.password",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 800,
        "y": 1200,
        "wires": [
            [
                "2010247ac72d2e52"
            ]
        ]
    },
    {
        "id": "aaa04ceac708adcf",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "470464e871d62c10"
        ],
        "x": 715,
        "y": 1220,
        "wires": []
    },
    {
        "id": "470464e871d62c10",
        "type": "link in",
        "z": "d30f86340f610285",
        "name": "link in 5",
        "links": [
            "aaa04ceac708adcf",
            "33c16737264ca4f9",
            "8e23a29f747e664d"
        ],
        "x": 405,
        "y": 1300,
        "wires": [
            [
                "c128a1b3fb57259d"
            ]
        ]
    },
    {
        "id": "2010247ac72d2e52",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 4",
        "func": "if(msg.match){\n    msg.payload={\n        user_id : msg.user.user_id,\n        username : msg.user.username,\n        email : msg.user.email,\n        role : msg.user.role,\n        ip : msg.req.ip\n    }\n}else{\n    msg.payload = {\n        error : 'Invalid Username or password.'\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1200,
        "wires": [
            [
                "9cb22c052be8c646",
                "220829e4e4e0f12d"
            ],
            [
                "33c16737264ca4f9",
                "28347e8a101010f1"
            ]
        ]
    },
    {
        "id": "33c16737264ca4f9",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "470464e871d62c10"
        ],
        "x": 1055,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a42e99d199627385",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1120,
        "wires": []
    },
    {
        "id": "28347e8a101010f1",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1300,
        "wires": []
    },
    {
        "id": "220829e4e4e0f12d",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1160,
        "wires": []
    },
    {
        "id": "fc70af5ee99198cc",
        "type": "subflow:c0526da0e6440e34",
        "z": "d30f86340f610285",
        "name": "",
        "x": 230,
        "y": 280,
        "wires": [
            [
                "3f65cceaf7c52cfb",
                "503270eaa274fab9"
            ]
        ]
    },
    {
        "id": "a3d23258b8dd919a",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "user-ops",
        "url": "/user-ops/:type",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1340,
        "wires": [
            [
                "171f6924a38ab717"
            ]
        ]
    },
    {
        "id": "171f6924a38ab717",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 8",
        "func": "msg.cookies ={\n    token: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1340,
        "wires": [
            [
                "ae924474df410a68"
            ]
        ]
    },
    {
        "id": "ae924474df410a68",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/log-in-screen"
        },
        "x": 420,
        "y": 1340,
        "wires": []
    },
    {
        "id": "77dcab94891a6c1e",
        "type": "subflow:c0526da0e6440e34",
        "z": "d30f86340f610285",
        "name": "",
        "x": 250,
        "y": 400,
        "wires": [
            [
                "b487e39626ca3642"
            ]
        ]
    },
    {
        "id": "1becad322576993c",
        "type": "subflow:c0526da0e6440e34",
        "z": "d30f86340f610285",
        "name": "",
        "x": 370,
        "y": 880,
        "wires": [
            [
                "5ae2f31c5c6c1b61"
            ]
        ]
    },
    {
        "id": "51bce0603f503bc1",
        "type": "subflow:05e1edea3a8699f2",
        "z": "d30f86340f610285",
        "name": "",
        "x": 880,
        "y": 280,
        "wires": [
            [
                "f2795fdc40964423"
            ],
            [
                "8977c43faa8ac5b1"
            ]
        ]
    },
    {
        "id": "bab22d443eeaae91",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 240,
        "wires": []
    },
    {
        "id": "5ae2f31c5c6c1b61",
        "type": "subflow:07d474b8a173dcca",
        "z": "d30f86340f610285",
        "name": "",
        "x": 520,
        "y": 880,
        "wires": [
            [
                "ebdb04b353b61d68"
            ]
        ]
    },
    {
        "id": "a3f72b4d91f6c3b2",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1100,
        "y": 980,
        "wires": []
    },
    {
        "id": "9b36b2dacabc2bcd",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 11",
        "func": "if(msg.req.headers.fetchflag){\n    return[null,msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 940,
        "wires": [
            [
                "3402dced3a1ca4e5"
            ],
            [
                "a3f72b4d91f6c3b2"
            ]
        ]
    },
    {
        "id": "af589739c51b2bb1",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 13",
        "func": "\nlet user_in_q = msg.payload.find(x => x.user_id == msg.formData.user_id)\nif(user_in_q && msg.formData.password){\n    if (msg.formData.password === user_in_q.password) return [null,msg];\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 780,
        "wires": [
            [
                "15f7d4de4bb162e9",
                "0f0370aecf747eb2"
            ],
            [
                "28d7bca133919890"
            ]
        ]
    },
    {
        "id": "2ad17c48a8883209",
        "type": "inject",
        "z": "d30f86340f610285",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "8a83517c538f8bcb"
            ]
        ]
    },
    {
        "id": "ad88e698e83a7ac4",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "4cfba0784563c5fa",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 700,
        "y": 120,
        "wires": [
            [
                "ad88e698e83a7ac4"
            ]
        ]
    },
    {
        "id": "704ea33f0b4faeaf",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 14",
        "func": "if(msg.payload) return;\n\nmsg.payload = {\n    \"user_id\": 1760964331235,\n    \"username\": \"pansage\",\n    \"password\": \"$2a$10$R4pRyg31tpDYQVYHLQnhK.URZIXyXrS7OZky9gJw1bXCqdFesXFK6\",\n    \"role\": [\n        \"Simiabraz\"\n    ],\n    \"isActive\": true,\n    \"email\": \"emirhangormus25@gmail.com\",\n    \"stamp\": {\n        \"CreatedAt\": 1760964331235,\n        \"ip\": \"127.0.0.1\",\n        \"username\": \"pansage\",\n        \"email\": \"emirhangormus25@gmail.com\"\n    },\n    \"tasklist\": [],\n    \"date\": \"20.10.2025\",\n    \"time\": \"16: 56: 50\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            [
                "4cfba0784563c5fa"
            ]
        ]
    },
    {
        "id": "96d67a69984c2ed1",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "count",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 390,
        "y": 120,
        "wires": [
            [
                "704ea33f0b4faeaf",
                "c629aa74171cbdfc"
            ]
        ]
    },
    {
        "id": "8a83517c538f8bcb",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 15",
        "func": "msg.payload={\n    username : \"pansage\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "96d67a69984c2ed1"
            ]
        ]
    },
    {
        "id": "c629aa74171cbdfc",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 160,
        "wires": []
    },
    {
        "id": "e9111a1400075747",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "todo",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "088771170bd63818"
            ]
        ]
    },
    {
        "id": "088771170bd63818",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "db.todo.find()",
        "func": "msg.payload_json = JSON.stringify(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 280,
        "wires": [
            [
                "51bce0603f503bc1"
            ]
        ]
    },
    {
        "id": "7bde36ceb6999a53",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "todo",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 820,
        "y": 360,
        "wires": [
            [
                "35f6cf6ab32890d3"
            ]
        ]
    },
    {
        "id": "f4fa6f1adf4d5283",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "todo",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 800,
        "y": 420,
        "wires": [
            [
                "fff8c91aa1f26fbb"
            ]
        ]
    },
    {
        "id": "fff8c91aa1f26fbb",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "db.todoOtherHandler()",
        "func": "if (!msg.payload) {\n    msg.payload={}\n    msg.error = {\n        message: \"No matching Task found with the ID.\"\n    }\n    msg.payload.error = msg.error.message;\n    return [null, msg]\n}\n\nif (msg.payload.user_id !== msg.user.user_id && !msg.user.role.includes(\"Simiabraz\")) {\n    msg.payload={}\n    msg.error = {\n        message: \"You do not have access to this operation\"\n    }\n    msg.payload.error = msg.error.message;\n    return [null, msg]\n}\n\nif (msg.req.params.type === \"updateTask\" && msg.payload.done) {\n    msg.payload={}\n    msg.error = {\n        message: \"You cannot update a task that has been completed\"\n    }\n    msg.payload.error = msg.error.message;\n    return [null, msg]\n}\n\n// main flow\nmsg.todo = msg.payload\nconst idAsNumber = parseFloat(msg.formData.id);\nmsg.payload =[{\n        _id: idAsNumber\n    }]\n\nconst date = new Date()\nconst now = date.getTime()\n\nif (msg.req.params.type === \"deleteTask\") {\n    msg.operation = \"deleteOne\"\n} else if (msg.req.params.type === \"reminder\") {\n    // to rework\n    let scheduleOptions = msg.scheduleOptions = {\n        \"crontiMethod\": \"onDate\",\n        \"crontiArgs\": [msg.formData.reminder_date]\n    }\n    msg.topic = msg.todo.name;\n\n    msg.payload.push({\n        $set: {\n            task_deadline : msg.formData.task_deadline,\n            schedule: {\n                formData: msg.formData,\n                options: scheduleOptions\n            }\n        }\n    })\n    msg.operation = \"updateOne\"\n} else {\n    msg.operation = \"updateOne\"\n    switch (msg.req.params.type) {\n        case \"complete\":\n            msg.payload.push({\n                $set: {\n                    done: true\n                }\n            })\n            break;\n        case \"incomplete\":\n            msg.payload.push({\n                $set: {\n                    done: false\n                }\n            })\n            break;\n        case \"updateTask\":\n            msg.payload.push({\n                $set: {\n                    name: msg.formData.new_task_name\n                }\n            })\n            break;\n    }\n    msg.payload[1].$set.stamp = {\n        createdAt: now,\n        ip: msg.req.ip,\n        username: msg.user.username || \"\",\n        email: msg.user.email || \"\",\n        user_id:msg.user.user_id\n    }\n    msg.payload[1].$set.date = date.toLocaleDateString(\"TR\") // DD.AA.YYYY\n    msg.payload[1].$set.time = date.toLocaleTimeString(\"TR\") // SS:DD:NN\n}\nreturn msg.scheduleOptions ? [msg, null, msg] : msg;\n\n// end of the flow\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 420,
        "wires": [
            [
                "af67137bd1dff66d"
            ],
            [
                "27077886b59b67b0"
            ],
            [
                "c320bbd285d009d9"
            ]
        ],
        "outputLabels": [
            "handler",
            "Error",
            "reminder"
        ]
    },
    {
        "id": "af67137bd1dff66d",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "todo",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1170,
        "y": 360,
        "wires": [
            [
                "898c2a2a832f7d23"
            ]
        ]
    },
    {
        "id": "898c2a2a832f7d23",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 1340,
        "y": 360,
        "wires": []
    },
    {
        "id": "27077886b59b67b0",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 17",
        "func": "if(msg.req.headers.fetchflag){\n    return[null,msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 420,
        "wires": [
            [
                "83d43d6a896051e6"
            ],
            [
                "a78704f4d1593f8e"
            ]
        ]
    },
    {
        "id": "83d43d6a896051e6",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "6174979e5eaf9458"
        ],
        "x": 1295,
        "y": 400,
        "wires": []
    },
    {
        "id": "a78704f4d1593f8e",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1340,
        "y": 440,
        "wires": []
    },
    {
        "id": "c320bbd285d009d9",
        "type": "change",
        "z": "d30f86340f610285",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "scheduleOptions",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "67056a036a9c0a27"
            ]
        ]
    },
    {
        "id": "67056a036a9c0a27",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "54335392d440cd72"
        ],
        "x": 1375,
        "y": 480,
        "wires": []
    },
    {
        "id": "54335392d440cd72",
        "type": "link in",
        "z": "d30f86340f610285",
        "name": "link in 6",
        "links": [
            "67056a036a9c0a27"
        ],
        "x": 1025,
        "y": 540,
        "wires": [
            [
                "3bfb302d3befacb8",
                "fc3d5c9978528e75"
            ]
        ]
    },
    {
        "id": "3bfb302d3befacb8",
        "type": "crontinject",
        "z": "d30f86340f610285",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 1140,
        "y": 520,
        "wires": [
            [
                "06e184db2e0e6305"
            ]
        ]
    },
    {
        "id": "fc3d5c9978528e75",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "delete reminder",
        "func": "if (msg.todo?.schedule?.response) {\n    msg.payload = {\n        _id: msg.todo.schedule.response.self._id\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 580,
        "wires": [
            [
                "6a150621822d7921"
            ]
        ]
    },
    {
        "id": "06e184db2e0e6305",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "header",
        "func": "if (msg.schedule) {\n    msg.payload = [\n        {\n            _id: msg.formData.id\n        },\n        {\n            $set: {\n                schedule: msg.response\n            }\n        }\n    ]\n    return [null, msg]\n}\n\nmsg.from = \"noreply <noreply@todo.com\"\nmsg.to = msg.user.email\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 520,
        "wires": [
            [
                "aa5a05fa4a54f468"
            ],
            [
                "f854fc5402d4772b"
            ]
        ]
    },
    {
        "id": "aa5a05fa4a54f468",
        "type": "template",
        "z": "d30f86340f610285",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p>Merhaba {{todo.username}},</p>\n<p></p>\n{{todo.name}} işiniz için hatırlamak istiyoruz :)\n<p></p>\n<p>Bilginize.</p>",
        "output": "str",
        "x": 1520,
        "y": 500,
        "wires": [
            [
                "9b054860e25c5872"
            ]
        ]
    },
    {
        "id": "f854fc5402d4772b",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "todo",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1530,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6a150621822d7921",
        "type": "crontinject",
        "z": "d30f86340f610285",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 1310,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f8e65f0d3d2db96f",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "User Management",
        "url": "/user-management",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "5722a914b3cd9095"
            ]
        ]
    },
    {
        "id": "798caad19a47e6b8",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 640,
        "wires": []
    },
    {
        "id": "5572cb20a9c57e8e",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "db.user.find()",
        "func": "msg.payload = [[\n    {\n        $match: {}\n    },\n    {\n        $sort: {\n            \"stamp.createdAt\": -1\n        }\n    },\n    {\n        $addFields: {\n            hasAdmin: {\n                $cond: [{ $eq: [\"$role\", \"Simiabraz\"] }, true, false]\n            }\n        }\n    }\n]]\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 640,
        "wires": [
            [
                "2057a60347714bea",
                "a9793230cbf5e297"
            ]
        ]
    },
    {
        "id": "7319a24228b3f8eb",
        "type": "template",
        "z": "d30f86340f610285",
        "name": "User-Management Screen",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User-List</title>\n    <!-- Jquery -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"\n        integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n    <!-- Using CDN for bootstrap for this example to work standalone -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/solid-dark.min.js\"></script>\n    <link href=\"https://cdn.datatables.net/2.0.8/css/dataTables.bootstrap5.min.css\" rel=\"stylesheet\">\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n    </style>\n    <script>\n        const taskDataPayload = JSON.parse('{{{payload_json}}}');\n        console.log(taskDataPayload)\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-6 offset-md-4 mt-1 mb-5\" style=\"max-width: 500px; text-align:center;\">\n                <div class=\"p-3 text-danger-emphasis bg-danger-subtle border border-danger-subtle rounded-3\" style=\"display:none;\"\n                    id=\"err_msg_container\"></div>\n            </div>\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <!-- action=\"/admin-ops/add-user\" -->\n                <form action=\"\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input type=\"text\" name=\"username\" class=\"form-control\" placeholder=\"user-name\" value=\"\" id=\"UsernameInput\" />\n                        <input type=\"text\" name=\"password\" class=\"form-control\" placeholder=\"password\" value=\"\" id=\"PasswordInput\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"button\" name=\"id\" value=\"\" onclick=\"addUser()\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <!-- \n                                This is the table \"shell\". \n                                We define the <thead> and <tfoot>. \n                                DataTables will build the <tbody> automatically.\n                            -->\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <!-- These headers must match your columns -->\n                                <th>User Name</th>\n                                <th>Date, Time</th>\n                                <th>Role</th>\n                                <th>Status</th>\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <!-- The <tbody> will be generated by DataTables -->\n                        <tbody>\n                        </tbody>\n                        <!-- Add a tfoot for the column filters -->\n                        <tfoot>\n                            <tr>\n                                <th>User Name</th>\n                                <th>Date, Time</th>\n                                <th>Role</th>\n                                <th>Status</th>\n                                <th style=\"text-align: right;\"></th>\n                            </tr>\n                        </tfoot>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Update</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n                    <div id=\"survey2Container\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n    <div class=\"postion-relative\">\n        <a href=\"/\"\n            class=\" btn btn-primary btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-card-checklist\"></i></a>\n    \n    </div>\n    <div class=\"postion-relative\">\n        <div class=\"btn-group btn-lg position-fixed top-0 end-0 m-5 shadow\">\n            <button class=\"btn btn-light\">{{user.username}}</button>\n            <a href=\"/user-ops/logout\" class=\"btn btn-danger\"><i class=\"bi bi-box-arrow-right\"></i></a>\n        </div>\n        <!-- <a href=\"/user-management\" class=\" btn btn-danger btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-person-circle\"></i></a> -->\n    \n    </div>\n\n\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n\n                <input type=\"hidden\" name=\"user_id\" value=\"\" class=\"popover-id-input\" />\n                <div class=\"active-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/user-management/admin-ops/deactivate-user\" class=\"btn btn-outline-warning \" value=\"\" onclick=\"\" data-bs-placement=\"top\" data-bs-title=\"Deactivate User\" data-bs-toggle=\"tooltip\"><i class=\"bi bi-person-slash\"></i></button>\n                </div>\n                <div class=\"inactive-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/user-management/admin-ops/activate-user\" class=\"btn btn-outline-success\" value=\"\" onclick=\"\" data-bs-placement=\"top\" data-bs-title=\"Activate User\" data-bs-toggle=\"tooltip\"><i class=\"bi bi-person-check\"></i></button>\n                </div>\n                <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"user_id\" value=\"\" onclick=\"update_User(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                <button type=\"submit\" formaction=\"/user-management/admin-ops/delete-user\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete User\"><i class=\"bi bi-person-x\"></i></button>\n            </form> \n        </div>\n    </template>\n\n    <!-- DataTables JS -->\n    <script src=\"https://cdn.datatables.net/2.0.8/js/dataTables.min.js\"></script>\n    <!-- DataTables Bootstrap 5 JS -->\n    <script src=\"https://cdn.datatables.net/2.0.8/js/dataTables.bootstrap5.min.js\"></script>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        // Make sure your update_User function is defined in the global scope\n            // e.g.: function update_User(value, el) { console.log('Update user:', value); }\n    \n            $(document).ready(function() {\n                // 1. Get the payload data from Node-RED\n                const taskDataPayload = JSON.parse('{{{payload_json}}}');\n                \n                // 2. Get the popover template content\n                const popoverTemplate = document.getElementById('popover-template');\n    \n                // 3. Initialize DataTables\n                const dataTableInstance = $('#task-table').DataTable({\n                    // This is your array of user objects\n                    data: taskDataPayload,\n                    \n                    // This tells DataTables how to handle the Bootstrap styling\n                    responsive: true,\n                    \n                    language: {\n                        emptyTable: \"Henüz Kullanıcı yok\"\n                    },\n    \n                    // This runs once the table is fully initialized\n                    initComplete: function () {\n                        this.api()\n                            .columns()\n                            .every(function () {\n                                let column = this;\n                                let title = $(column.header()).text();\n                                \n                                let colDef = this.settings()[0].aoColumns[this.index()];\n    \n                                // Only add search inputs for searchable columns\n                                if (colDef.bSearchable) {\n                                    let input = $('<input type=\"text\" class=\"form-control form-control-sm\" placeholder=\"Search ' + title + '\" />')\n                                        .appendTo($(column.footer()).empty())\n                                        .on('keyup change clear', function () {\n                                            if (column.search() !== this.value) {\n                                                column.search(this.value).draw();\n                                            }\n                                        });\n                                    \n                                    $(input).on('click', function(e) {\n                                        e.stopPropagation();\n                                    });\n                                } else {\n                                    $(column.footer()).empty();\n                                }\n                            });\n                    },\n    \n                    // This is the most important part.\n                    // We define each column and tell it what data to show.\n                    columns: [\n                        // Column 1: User Name (with conditional styling)\n                        { \n                            data: 'username',\n                            title: 'User Name',\n                            render: function(data, type, row) {\n                                if (row.isActive === false) {\n                                    return `<span class=\"text-muted text-decoration-line-through\">${data}</span>`;\n                                }\n                                return data;\n                            }\n                        },\n                        // Column 2: Date, Time (with custom HTML)\n                        { \n                            data: 'date',\n                            title: 'Date, Time',\n                            render: function(data, type, row) {\n                                return `<span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> ${row.date},${row.time}</span>`;\n                            }\n                        },\n                        // Column 3: Role (simple text)\n                        { \n                            data: 'role',\n                            title: 'Role'\n                        },\n                        // Column 4: Status (conditional text)\n                        { \n                            data: 'isActive',\n                            title: 'Status',\n                            render: function(data, type, row) {\n                                return data ? 'Active' : 'Inactive';\n                            }\n                        },\n                        // Column 5: Actions (custom button)\n                        { \n                            data: null,\n                            title: 'Actions',\n                            className: 'text-end', \n                            orderable: false,      \n                            searchable: false,     \n                            render: function(data, type, row) {\n                                // Convert boolean to string for data attribute\n                                const isActiveStr = row.isActive ? 'true' : 'false';\n                                return `\n                                    <button\n                                        class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                        data-user_id=\"${row.user_id}\"\n                                        data-isactive=\"${isActiveStr}\">\n                                        <i class=\"bi bi-three-dots-vertical\"></i>\n                                    </button>\n                                `;\n                            }\n                        }\n                    ],\n    \n                    // \n                    // =============================================================\n                    // START: ADDED drawCallback\n                    // This is the fix. This code runs every time the table is drawn.\n                    // =============================================================\n                    drawCallback: function(settings) {\n                        \n                        // We must destroy old popovers on redraw to prevent memory leaks\n                        // Find all popovers in the table body and destroy them\n                        const oldPopoverTriggerList = this.api().table().body().querySelectorAll('.options-popover-btn');\n                        oldPopoverTriggerList.forEach(popoverTriggerEl => {\n                            const popover = bootstrap.Popover.getInstance(popoverTriggerEl);\n                            if (popover) {\n                                popover.dispose();\n                            }\n                        });\n    \n                        // Now, initialize new popovers for the buttons in the *current* view\n                        const popoverTriggerList = this.api().table().body().querySelectorAll('.options-popover-btn');\n                        \n                        popoverTriggerList.forEach(popoverTriggerEl => {\n                            \n                            const itemId = popoverTriggerEl.dataset.user_id;\n                            const isActive = popoverTriggerEl.dataset.isactive === 'true';\n    \n                            const popover = new bootstrap.Popover(popoverTriggerEl, {\n                                html: true,\n                                title: 'Options',\n                                sanitize: false,\n                                trigger: 'click', // Use 'click' to open\n                                \n                                content: function () {\n                                    const contentElement = popoverTemplate.content.cloneNode(true);\n                                    contentElement.querySelector('.popover-id-input').value = itemId;\n                                    \n                                    let updatebtn = contentElement.querySelector('.btn-update');\n                                    updatebtn.value = itemId;\n    \n                                    if (isActive) {\n                                        contentElement.querySelector('.inactive-buttons').remove();\n                                    } else {\n                                        contentElement.querySelector('.active-buttons').remove();\n                                    }\n                                    return contentElement;\n                                }\n                            });\n    \n                            // Initialize nested tooltips *after* the popover is shown\n                            popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                                const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                                if (popoverId) {\n                                    const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                                    if (popoverBody) {\n                                        const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                                        [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl, { container: popoverBody }));\n                                    }\n                                }\n                            });\n                        });\n    \n                        // Initialize any *other* tooltips in the table body\n                        const tooltipTriggerList = this.api().table().body().querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                        [...tooltipTriggerList].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                    }\n                    // =============================================================\n                    // END: ADDED drawCallback\n                    // =============================================================\n    \n                });\n    \n                // This logic makes popovers close when you click elsewhere on the page\n                $('html').on('click', function(e) {\n                    // Check if the click is on a popover button or inside a popover\n                    if (typeof $(e.target).data('bs-toggle') == 'undefined' && \n                        $(e.target).closest('.popover').length === 0 &&\n                        !$(e.target).hasClass('options-popover-btn') &&\n                        $(e.target).closest('.options-popover-btn').length === 0\n                       ) {\n                        // If not, hide all popovers\n                        $('.options-popover-btn').popover('hide');\n                    }\n                });\n    \n            });\n    </script>\n\n    <!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element    \n\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n\n        \n        themeToggleButton.addEventListener('click', () => {\n\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n\n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n\n\n    <script>\n\n        document.addEventListener('DOMContentLoaded', () => {\n            \n            const popoverTemplate = document.getElementById('popover-template');\n\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n                const itemId = popoverTriggerEl.dataset.user_id;\n\n                const isActive = popoverTriggerEl.dataset.isactive === 'true';\n\n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    trigger: 'click manual',\n\n                    content: function () {\n\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n    \n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n\n\n                        if (isActive) {\n                            contentElement.querySelector('.inactive-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.active-buttons').remove();\n                        }\n\n                        return contentElement;\n                    }\n                });\n                \n\n                //  Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        function addUser(){\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Add User\";\n\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n \n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            \n            let u_name_input = document.getElementById(\"UsernameInput\").value\n            let password_input = document.getElementById(\"PasswordInput\").value\n\n            addUserModal.setValue('username',u_name_input);\n            addUserModal.setValue('password',password_input);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            addUserModal.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            addUserModal.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            addUserModal.render(document.getElementById(\"surveyContainer\"));\n            \n        };\n\n        async function sendAddedUser(sender){\n\n\n            const surveyData = sender.data;\n\n            \n            const url = '/user-management/admin-ops/add-user';\n            \n \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'fetchflag' : true,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(surveyData)\n                });\n                const response_data = await response.json();\n                if (response.ok) {\n                    console.log(\"User Added successfully!\");\n                    console.log(response);\n                    console.log(response.ok);\n                    location.reload();\n                } else {\n                    console.error(\"Failed to update task.\");\n                    $('#err_msg_container').text(response_data.error)\n                    $('#err_msg_container').css('display','inline')\n                }\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        }\n        \n        function update_User(num,obj){\n            const info = {\n                user_id : num\n            }\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Update\";\n            modalupdate.setAttribute('value', num);\n\n            // destroy popovers when modal is active\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n            // destroy tooltips when modal is active\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            \n            let object_in_q = taskDataPayload.find(user => user.user_id == num);\n            survey.setValue('user_id',num);\n            survey.setValue('username',object_in_q.username);\n            survey.setValue('password',object_in_q.password);\n            survey.setValue('role',object_in_q.role[0]);\n            survey.setValue('email',object_in_q.email);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            survey.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            survey.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            survey.render(document.getElementById(\"surveyContainer\"));\n            \n        };\n        \n        document.addEventListener('DOMContentLoaded', ()=>{\n            document.querySelector('.btn-close').addEventListener('click', ()=>{\n                close_user_update_window();\n            });\n            function close_user_update_window(){\n                survey.clear();\n                addUserModal.clear();\n            };\n        });\n\n        async function sendUserUpdate(sender){\n\n            const surveyData = sender.data;\n\n\n            const url = '/user-management/admin-ops/update-user';\n            \n            // Use fetch to send a POST request\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'fetchflag' : true,\n                'Content-Type': 'application/json'\n            },\n            // Convert the JavaScript object to a JSON string for the request body\n            body: JSON.stringify(surveyData)\n            });\n            const response_data = await response.json();\n            if (response.ok) {\n                console.log(\"User updated successfully!\");\n                console.log(response);\n                console.log(\"respones is ok : \", response.ok);\n                console.log(response_data)\n                location.reload();\n            } else {\n                console.error(\"Failed to update task.\");\n                console.log(response_data)\n                console.log(response_data.error)\n                $('#err_msg_container').text(response_data.error)\n                $('#err_msg_container').css('display','inline')\n            }\n\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        };\n\n    </script>\n    \n    <script>\n\n        const surveyJson = {\n            pages: [{\n                name: \"Update User\",\n                elements: [\n                    {\n                        name: \"user_id\", // The name to access the data\n                        type: \"text\", // Can be any input type\n                        inputType: \"numeric\",\n                        visible: false, // This is the key property to hide it,\n                        isRequired:true\n                    },{\n                        type: \"text\",\n                        name: \"username\",\n                        \"isRequired\": true,\n                        inputType: \"text\",\n                        title: \"Enter New Username:\",\n                    },\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        \"isRequired\": true,\n                        name: \"password\",\n                        title: \"Password\"\n                    },\n                    {\n                        \"type\": \"dropdown\",\n                        \"name\": \"role\",\n                        \"title\": \"Role\",\n                        \"isRequired\": true,\n                        \"showOtherItem\": false,\n                        \"choices\": [ \"Simiabraz\", \"Miamiasme\"]\n                    },\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        name: \"email\",\n                        title: \"E-mail\",\n                        validators: [\n                            { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                        ]\n                    }]\n            }]\n        };\n            \n        const survey = new Survey.Model(surveyJson);\n        survey.applyTheme(SurveyTheme.DefaultDark);\n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendUserUpdate);\n        \n    </script>\n    <script>\n\n        const addUserModalJson = {\n            pages: [{\n                name: \"PersonalDetails\",\n                elements: [\n                {\n                    type: \"text\",\n                    name: \"username\",\n                    \"isRequired\": true,\n                    inputType: \"text\",\n                    title: \"Enter New Username:\",\n                },\n                {\n                    type: \"text\",\n                    inputType: \"text\",\n                    \"isRequired\": true,\n                    name: \"password\",\n                    title: \"Password\"\n                },\n                {\n                    \"type\": \"dropdown\",\n                    \"name\": \"role\",\n                    \"title\": \"Role\",\n                    \"isRequired\": true,\n                    \"showOtherItem\": false,\n                    \"choices\": [ \"Simiabraz\", \"Miamiasme\"]\n                },\n                {\n                    type: \"text\",\n                    inputType: \"text\",\n                    name: \"email\",\n                    title: \"E-mail\",\n                    validators: [\n                        { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                    ]\n                }]\n            }]\n        };\n            \n        const addUserModal = new Survey.Model(addUserModalJson);\n        addUserModal.applyTheme(SurveyTheme.DefaultDark);\n        addUserModal.focusFirstQuestionAutomatic = false;\n        addUserModal.clearInvisibleValues = \"none\";\n        addUserModal.onComplete.add(sendAddedUser);\n        \n    </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 1120,
        "y": 640,
        "wires": [
            [
                "798caad19a47e6b8"
            ]
        ]
    },
    {
        "id": "2057a60347714bea",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 700,
        "wires": []
    },
    {
        "id": "5722a914b3cd9095",
        "type": "subflow:c0526da0e6440e34",
        "z": "d30f86340f610285",
        "name": "",
        "x": 290,
        "y": 640,
        "wires": [
            [
                "5f27c5c28a1f7599"
            ]
        ]
    },
    {
        "id": "5f27c5c28a1f7599",
        "type": "subflow:07d474b8a173dcca",
        "z": "d30f86340f610285",
        "name": "",
        "x": 440,
        "y": 640,
        "wires": [
            [
                "5572cb20a9c57e8e"
            ]
        ]
    },
    {
        "id": "a9793230cbf5e297",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 760,
        "y": 640,
        "wires": [
            [
                "40b33893332266d6"
            ]
        ]
    },
    {
        "id": "011722a3700b7988",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "email validation",
        "func": "msg.payload = [[\n    {\n        $match: {} // 1. Get all documents\n    },\n    {\n        $sort: { // 2. Sort them\n            \"stamp.createdAt\": -1\n        }\n    }\n]]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 820,
        "wires": [
            [
                "ef6f207572d64e1c",
                "70f130099d936b2e"
            ]
        ]
    },
    {
        "id": "ef6f207572d64e1c",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "e1ca0c9da842c855",
                "ab60e7c51dbb7753"
            ]
        ]
    },
    {
        "id": "e1ca0c9da842c855",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "email validation",
        "func": "const emailToCheck = msg.formData.email\n\nconst emailExists = msg.payload.some(x => x.email === emailToCheck);\n\nif (emailExists) {\n\n    msg.payload={\n        error:\"This email address is already in use.\"\n    }\n    \n    msg.error = {\n        message: msg.payload.error\n    }\n    return [null, msg];\n\n}\nmsg.userlistem = msg.payload;\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 820,
        "wires": [
            [
                "af589739c51b2bb1",
                "d53a3d846c0ace74"
            ],
            [
                "3739d83694a6409b",
                "95e5871a1dc7f63b"
            ]
        ]
    },
    {
        "id": "3739d83694a6409b",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "err 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 920,
        "wires": []
    },
    {
        "id": "43f895985345eb90",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "3edd930c0aa7b137"
        ],
        "x": 1385,
        "y": 880,
        "wires": []
    },
    {
        "id": "b2e2a95eb7a46cc8",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1440,
        "y": 920,
        "wires": []
    },
    {
        "id": "95e5871a1dc7f63b",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 16",
        "func": "if(msg.req.headers.fetchflag){\n    return[null,msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 880,
        "wires": [
            [
                "43f895985345eb90"
            ],
            [
                "b2e2a95eb7a46cc8"
            ]
        ]
    },
    {
        "id": "28d7bca133919890",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "db.priorUserHandler()",
        "func": "const date = new Date();\nconst now = date.getTime();\n\nif (msg.req.params.type === 'add-user') {\n    // const last = users[users.length];\n    // let new_user_id = last.user_id +1;\n\n    msg.payload={\n        _id: now,\n        user_id: now,\n        username: msg.formData.username,\n        password: msg.formData.password,\n        role: [msg.formData.role],\n        email: (msg.formData.email) ? msg.formData.email : \"\",\n        isActive: true,\n        stamp: {\n            CreatedAt: now,\n            ip: msg.req.ip,\n            username: msg.user.username,\n            email: (msg.user.email) ? msg.user.email : \"\",\n        },\n        tasklist: [],\n        date: date.toLocaleDateString(),\n        time: date.toLocaleTimeString()\n    }\n    return msg;\n}\n\n\nconst idAsNumber = parseFloat(msg.formData.user_id);\nmsg.payload = [{\n    _id: idAsNumber\n}]\n\nreturn [null,msg];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 780,
        "wires": [
            [
                "e65b85618c2b029b"
            ],
            [
                "3bbdfc708cf13bbe",
                "b2fac961290e902d"
            ],
            []
        ]
    },
    {
        "id": "e65b85618c2b029b",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1840,
        "y": 720,
        "wires": [
            [
                "98252465fa229a71"
            ]
        ]
    },
    {
        "id": "563f15745bae6e51",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/user-management"
        },
        "x": 2200,
        "y": 680,
        "wires": []
    },
    {
        "id": "98252465fa229a71",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 12",
        "func": "if(msg.req.headers.fetchflag){\n    return[null,msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 700,
        "wires": [
            [
                "563f15745bae6e51"
            ],
            [
                "7f834ee7b5fcc5c4"
            ]
        ]
    },
    {
        "id": "7f834ee7b5fcc5c4",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2200,
        "y": 720,
        "wires": []
    },
    {
        "id": "8673e3f057c19332",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 18",
        "func": "const date = new Date()\nconst now = date.getTime()\n\nif (msg.req.params.type === \"delete-user\") {\n    msg.operation = \"deleteOne\"\n} else {\n    msg.operation = \"updateOne\"\n    switch (msg.req.params.type) {\n        case \"activate-user\":\n            msg.payload.push({\n                $set: {\n                    isActive: true\n                }\n            })\n            break;\n        case \"deactivate-user\":\n            msg.payload.push({\n                $set: {\n                    isActive: false\n                }\n            })\n            break;\n        case \"update-user\":\n            let emailtobe=\"\";\n            if(msg.formData.email){\n                emailtobe = msg.formData.email;\n            }\n            if(msg.user_in_q.email){\n                emailtobe = msg.user_in_q.email\n            }\n            msg.payload.push({\n                $set: {\n                    username: msg.formData.username,\n                    role:[msg.formData.role],\n                    password:msg.formData.password,\n                    email: emailtobe || \"\",\n                    stamp : {\n                        createdAt: now,\n                        ip: msg.req.ip,\n                        username: msg.user.username || \"\",\n                        email: msg.user.email || \"\",\n                        user_id:msg.user.user_id\n                    },\n                    date : date.toLocaleDateString(\"TR\"),\n                    time : date.toLocaleTimeString(\"TR\")\n                }\n            })\n            break;\n    }\n}\nreturn  msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 780,
        "wires": [
            [
                "fcfe6f33aedc9d5f",
                "f48b5226c7a157fb"
            ]
        ]
    },
    {
        "id": "3bbdfc708cf13bbe",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 19",
        "func": "let user_in_q = msg.userlistem.find(x=> x.user_id == msg.formData.user_id)\nif (!user_in_q) {\n    msg.error = {\n        message: \"İd ile eşleşen bir kayıt bulunamadı.\",\n        formData: msg.formData\n    }\n    msg.payload.error=msg.error.message;\n    return [null, msg]\n}\nif (!user_in_q.isActive && msg.req.params.type==\"update-user\") {\n    msg.error = {\n        message: \"You cannot update a user that is inactive.\",\n        formData: msg.formData\n    }\n    msg.payload.error = msg.error.message;\n    return [null, msg]\n}\nmsg.user_in_q=user_in_q\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 780,
        "wires": [
            [
                "8673e3f057c19332",
                "ebb66eda198636eb"
            ],
            [
                "db31a3ad4d67eed5",
                "b03ecceeb4258d6d"
            ]
        ]
    },
    {
        "id": "b03ecceeb4258d6d",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "err 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 880,
        "wires": []
    },
    {
        "id": "51579c1ef6e98903",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "3edd930c0aa7b137"
        ],
        "x": 2185,
        "y": 840,
        "wires": []
    },
    {
        "id": "ad23c15726a3a8fa",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2240,
        "y": 880,
        "wires": []
    },
    {
        "id": "db31a3ad4d67eed5",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 20",
        "func": "if(msg.req.headers.fetchflag){\n    return[null,msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 840,
        "wires": [
            [
                "51579c1ef6e98903"
            ],
            [
                "ad23c15726a3a8fa"
            ]
        ]
    },
    {
        "id": "1b60e4c5c3317dbc",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "err 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 780,
        "wires": []
    },
    {
        "id": "aca642fcd90f5226",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 28",
        "mode": "link",
        "links": [
            "3edd930c0aa7b137"
        ],
        "x": 2655,
        "y": 720,
        "wires": []
    },
    {
        "id": "cddce58c96cd3859",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2700,
        "y": 760,
        "wires": []
    },
    {
        "id": "25284c5cc1c2f32b",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 21",
        "func": "if(msg.req.headers.fetchflag){\n    return[null,msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 740,
        "wires": [
            [
                "aca642fcd90f5226"
            ],
            [
                "cddce58c96cd3859"
            ]
        ]
    },
    {
        "id": "fcfe6f33aedc9d5f",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 2350,
        "y": 780,
        "wires": [
            [
                "25284c5cc1c2f32b",
                "1b60e4c5c3317dbc"
            ]
        ]
    },
    {
        "id": "82b5d75578403e26",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 480,
        "y": 1180,
        "wires": [
            [
                "179438eb32fa4a3f"
            ]
        ]
    },
    {
        "id": "503270eaa274fab9",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 220,
        "wires": []
    },
    {
        "id": "70f130099d936b2e",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 760,
        "wires": []
    },
    {
        "id": "ab60e7c51dbb7753",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 740,
        "wires": []
    },
    {
        "id": "d53a3d846c0ace74",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 720,
        "wires": []
    },
    {
        "id": "0f0370aecf747eb2",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 680,
        "wires": []
    },
    {
        "id": "b2fac961290e902d",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 920,
        "wires": []
    },
    {
        "id": "ebb66eda198636eb",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 660,
        "wires": []
    },
    {
        "id": "f48b5226c7a157fb",
        "type": "debug",
        "z": "d30f86340f610285",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 820,
        "wires": []
    },
    {
        "id": "40b33893332266d6",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "db.user.find()",
        "func": "msg.payload_json =JSON.stringify(msg.payload);\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 640,
        "wires": [
            [
                "7319a24228b3f8eb"
            ]
        ]
    },
    {
        "id": "8eb5697cf4550b85",
        "type": "http in",
        "z": "d30f86340f610285",
        "name": "",
        "url": "/categories/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 1100,
        "y": 120,
        "wires": [
            [
                "3fffe826bd3e80d4"
            ]
        ]
    },
    {
        "id": "3fffe826bd3e80d4",
        "type": "subflow:c0526da0e6440e34",
        "z": "d30f86340f610285",
        "name": "",
        "x": 1310,
        "y": 120,
        "wires": [
            [
                "b26c5beca24a3d38"
            ]
        ]
    },
    {
        "id": "b26c5beca24a3d38",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "validation",
        "func": "const typeLookup={\n    \"delete-cat\" : {\n        title: \"delete-category\",\n        rqA: [\"catname\", \"id\"]\n    },\n    \"add-cat\" : {\n        title: \"add-category\",\n        rqA: [\"catname\", \"id\"]\n    }\n}\n\n\n\nif(!Object.keys(typeLookup).includes(msg.req.params.type)){\n    msg.error = {\n        message: `Request Type Error: ${msg.req.params.type}. \\n Unsupported request type.`\n    }\n    msg.payload={error:msg.error.message}\n    return [null,msg]\n}\n\nconst requiredArgs = typeLookup[msg.req.params.type].rqA;\nconst argsAsArray = Array.isArray(requiredArgs) ? requiredArgs : [requiredArgs];\n\nif (!argsAsArray.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `The operation requires the following fields: ${argsAsArray.join(', ')}.`\n    };\n    msg.payload={error:msg.error.message}\n    return [null, msg];\n}\n\nmsg.formData = msg.payload;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 120,
        "wires": [
            [
                "81c47b75444195ad"
            ],
            [
                "9b825b0b037428d6"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "81c47b75444195ad",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 22",
        "func": "let idAsNumber = parseFloat(msg.formData.id);\nmsg.payload =[{\n        _id: idAsNumber\n    }]\nif(msg.req.params.type ==='add-cat'){\n    msg.payload.push(\n        { $push: { \"categories\": msg.formData.catname} }\n    )\n    return msg;\n}else{\n    msg.payload.push(\n        { $pull: { \"categories\": msg.formData.catname} }\n    )\n}\n\nreturn [null,msg];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 100,
        "wires": [
            [
                "2415f9be521062aa"
            ]
        ]
    },
    {
        "id": "9b825b0b037428d6",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "6174979e5eaf9458"
        ],
        "x": 1585,
        "y": 160,
        "wires": []
    },
    {
        "id": "2415f9be521062aa",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "todo",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1830,
        "y": 80,
        "wires": [
            [
                "024d09dca2c891dc"
            ]
        ]
    },
    {
        "id": "024d09dca2c891dc",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 2000,
        "y": 80,
        "wires": []
    },
    {
        "id": "f2795fdc40964423",
        "type": "template",
        "z": "d30f86340f610285",
        "name": "MainTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <!-- Jquery -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"\n        integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/solid-dark.min.js\"></script>\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n    </style>\n    <script>\n        const taskDataPayload = JSON.parse('{{{payload_json}}}');\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/operation/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Add New Task\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details</th>\n                                <th>User</th>\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n  \n                            {{#payload}}\n                            <tr>\n                                <td class=\"{{#done}}text-decoration-line-through{{/done}}\">{{name}}{{#categories}}<br><span class=\"badge bg-warning\"><i class=\"bi bi-tag-fill\"></i>{{categories}}</span>{{/categories}}</td>\n                                <td><span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> {{date}},{{time}}</span>\n                                </td>\n                                <td>{{username}}</td>\n                                <td align=\"right\">\n\n                                    <button\n                                            class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                            data-id=\"{{id}}\"\n                                            data-done=\"{{done}}\">\n                                            <i class=\"bi bi-three-dots-vertical\"></i>\n                                        </button>\n                                </td>\n                            </tr>\n                            {{/payload}}\n                            {{^payload}}\n                            <tr>\n                                <td class=\"text-muted\" colspan=\"4\">Henüz Task yok</td>\n                            </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Update</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n    <div class=\"postion-relative \">\n        <a href=\"/user-management\"\n            class=\" btn btn-primary btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-person-vcard\"></i></i></a>\n    \n    </div>\n    <div class=\"postion-relative\">\n        <div class=\"btn-group btn-lg position-fixed top-0 end-0 m-5 shadow\">\n            <button class=\"btn btn-light\">{{user.username}}</button>\n            <a href=\"/user-ops/logout\" class=\"btn btn-danger\"><i class=\"bi bi-box-arrow-right\"></i></a>\n        </div>\n        <!-- <a href=\"/user-management\" class=\" btn btn-danger btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-person-circle\"></i></a> -->\n    \n    </div>\n\n\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n  \n                <input type=\"hidden\" name=\"id\" value=\"\" class=\"popover-id-input\" />\n\n                <!-- Group of buttons to show when the task is DONE -->\n                <div class=\"done-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/operation/incomplete\" class=\"btn btn-outline-warning\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Mark As Incomplete\"><i class=\"bi bi-x-square\"></i></button>\n                </div>\n\n                <!-- Group of buttons to show when the task is NOT DONE -->\n                <div class=\"not-done-buttons\" style=\"display: contents;\">\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"id\" value=\"\" onclick=\"update_Task(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-secondary btn-reminder\" name=\"id\" value=\"\" onclick=\"set_reminder(this.value,this)\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\" data-bs-placement=\"top\" data-bs-title=\"Set Reminder\"><i class=\"bi bi-bell\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-info btn-categories\" data-bs-toggle=\"modal\" name=\"id\" value=\"\" onclick=\"taskCategories(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Categories\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-tag-fill\"></i></button>\n                    <button type=\"submit\" formaction=\"/operation/complete\" class=\"btn btn-outline-success\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Complete Task\"><i class=\"bi bi-check2-square\"></i></button>\n                </div>\n\n                <!-- This button is always shown inside the popover -->\n                <button type=\"submit\" formaction=\"/operation/deleteTask\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Task\"><i class=\"bi bi-trash3\"></i></button>\n            </form>\n        </div>\n    </template>\n\n    <template id=\"categorytemplate\">\n        <div>\n            <form action=\"/categories/add-cat\" method=\"POST\">\n                <div class=\"input-group input-group-lg mt-5\">\n                    <input required type=\"text\" name=\"catname\" value=\"\" class=\"form-control\" placeholder=\"Kategori Ekle\" />\n                    <input required type=\"hidden\" name=\"id\" value=\"\" id=\"add-cat-main-id\" />\n                    <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n                </div>\n            </form>\n            \n            <!-- CATEGORY LIST TABLE -->\n            <div class=\"table-responsive mt-5 border rounded\">\n                <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                    <thead>\n                        <tr>\n                            <th>Categories</th>\n                            <th style=\"text-align: right;\">Actions</th>\n                        </tr>\n                    </thead>\n                    <!-- This table body will be filled by our JavaScript -->\n                    <tbody id=\"category-table-body\">\n                        <!-- JavaScript will fill this -->\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </template>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n    <script>\n        // remove popovers\n        \n            \n\n    </script>\n<!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element\n\n\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n        \n        themeToggleButton.addEventListener('click', () => {\n\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n    <script>\n\n        document.addEventListener('DOMContentLoaded', () => {\n\n            const popoverTemplate = document.getElementById('popover-template');\n\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n \n                const itemId = popoverTriggerEl.dataset.id;\n                const isDone = popoverTriggerEl.dataset.done === 'true';\n    \n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    trigger: 'click manual',\n\n                    content: function () {\n\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n                        \n\n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n                        let reminderbtn = contentElement.querySelector('.btn-reminder');\n                        let categoriesbtn = contentElement.querySelector('.btn-categories');\n                        categoriesbtn.value = itemId;\n                        reminderbtn.value = itemId;\n                        const categories_tooltip = new bootstrap.Tooltip(categoriesbtn)\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n                        const reminder_tooltip =new bootstrap.Tooltip(reminderbtn);\n\n\n                        if (isDone) {\n                            contentElement.querySelector('.not-done-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.done-buttons').remove();\n                        }\n\n\n                        return contentElement;\n                    }\n                });\n                \n\n                // Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        \n        function update_Task(num,obj){\n            const info = {\n                id : num\n            }\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            \n            modal_title.innerText=\"Update\";\n            modalupdate.setAttribute('value', num);\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n            // let popoverList = document.querySelectorAll(\".popover\");\n            // popoverList.forEach(popover =>{\n            //     popover.hide();\n            // });\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            survey.setValue('id',num);\n            // survey.setValue('new_task_id',num);\n            survey.setValue('new_task_name',object_in_q.name);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            survey.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            survey.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            survey.render(document.getElementById(\"surveyContainer\"));\n            \n            \n        };\n\n\n        function taskCategories(num, obj) {\n            const info = {\n                id: num\n            };\n            \n            // 1. Get all the modal elements\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            let modal_body = document.querySelector('.modal-body');\n            const originalModalBodyHTML = modal_body.innerHTML;\n            \n            modalupdate.addEventListener('hidden.bs.modal', () => {\n                modal_body.innerHTML = originalModalBodyHTML;\n            \n            }, { once: true });\n            \n            modal_title.innerText = \"Categories\";\n            modalupdate.setAttribute('value', num);\n\n            document.querySelectorAll('.options-popover-btn').forEach(option_button => {\n                if (option_button.getAttribute(\"aria-describedby\")) {\n                option_button.click();\n                }\n            });\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n                tooltipList.forEach(tooltip => {\n                tooltip.remove();\n            });\n\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            const categories = object_in_q.categories || [];\n\n            let categorytemplate = document.getElementById('categorytemplate');\n            modal_body.innerHTML = categorytemplate.innerHTML;\n\n            let addCatIdInput = modal_body.querySelector('#add-cat-main-id');\n            let tableBody = modal_body.querySelector('#category-table-body');\n\n            if (addCatIdInput) {\n                addCatIdInput.value = object_in_q.id;\n            }\n            \n            if (tableBody) {\n                if (!categories || categories.length === 0) {\n                    const noCatRow = `\n                        <tr>\n                            <td class=\"text-muted\" colspan=\"2\">Henüz Kategori yok</td>\n                        </tr>\n                    `;\n                    tableBody.innerHTML = noCatRow;\n                } else {\n\n                    let allRowsHtml = '';\n                    \n\n                    const sanitize = (str) => {\n                        const temp = document.createElement('div');\n                        temp.textContent = str;\n                        return temp.innerHTML;\n                    };\n                    \n                    for (const item of categories) {\n\n                        const safeCatName = sanitize(item);\n                        const safeMainId = sanitize(object_in_q.id);\n                        \n                        const rowHtml = `\n                        <tr>\n                            <td>${safeCatName}</td>\n                            <td align=\"right\">\n                                <div class=\"btn-group\">\n                                    <form method=\"POST\" style=\"display: contents;\">\n                                        <input type=\"hidden\" name=\"catname\" value=\"${safeCatName}\" />\n                                        <input type=\"hidden\" name=\"id\" value=\"${safeMainId}\" />\n                                        <button type.\n                        =\"submit\" formaction=\"/categories/delete-cat\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Category\">\n                                                                <i class=\"bi bi-trash3\"></i>\n                                                            </button>\n                                    </form>\n                                </div>\n                            </td>\n                        </tr>\n                        `;\n                        allRowsHtml += rowHtml;\n                    }\n\n                    tableBody.innerHTML = allRowsHtml;\n                    \n                    // 10. Initialize new tooltips\n                    const tooltipTriggerList = tableBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                    [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n                }\n            } else {\n                console.error(\"Could not find #category-table-body inside the modal.\");\n            }\n        }\n        \n        document.addEventListener('DOMContentLoaded', ()=>{\n            document.querySelector('.btn-close').addEventListener('click', ()=>{\n                close_task_update_window();\n            });\n            function close_task_update_window(){\n                survey.clear();\n            };\n        });\n\n        async function sendTaskUpdate(sender){\n\n            const surveyData = sender.data;\n            // console.log(\"id \",typeof surveyData.id);\n            // console.log(\"new_task_id \",typeof surveyData.new_task_id);\n            // console.log(\"new_task_name: \",typeof surveyData.new_task_name);\n\n            const url = '/operation/updateTask';\n            \n \n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n            'fetchflag':true,\n            'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify(surveyData)\n            });\n            \n            if (response.ok) {\n                console.log(\"Task updated successfully!\");\n                console.log(response);\n                console.log(response.ok);\n                location.reload();\n\n            } else {\n                console.error(\"Failed to update task.\");\n            }\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        };\n\n        function set_reminder(num,obj){\n            let modalreminder = document.getElementById('staticBackdrop');\n            let modal_title = document.querySelector('.modal-title');\n            // modal_body.innerHTML =`<div id=\"surveyContainer\"></div>`;\n            modal_title.innerText=\"Set Reminder\";\n            modalreminder.setAttribute('value', num);\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            reminder.render(document.getElementById(\"surveyContainer\"));\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            let default_reminder = (object_in_q.reminder) ? object_in_q.reminder : null;\n            let default_deadline = (object_in_q.deadline) ? object_in_q.deadline : null ;\n            switch (default_reminder){\n                case object_in_q.reminder:\n                    default_reminder = getFormattedDateTimeLocal(new Date(default_reminder));\n                    reminder.setValue('reminder_date',default_reminder);\n                    break;\n                case null :\n                    reminder.clear();\n                    break;\n            }\n            switch (default_deadline){\n                case object_in_q.deadline:\n                    default_deadline = getFormattedDateTimeLocal(new Date(default_deadline));\n                    reminder.setValue('task_deadline',default_deadline);\n                    break;\n                case null :\n                    reminder.clear();\n                    break;\n            }\n            reminder.setValue('id',num);\n            \n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            reminder.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            reminder.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            \n\n        }\n\n        async function sendTaskReminder(sender){\n            console.log(\"Reminder Set:\", JSON.stringify(sender.data, null, 2));\n            sender.completedHtml = \"<h3>Reminder has been set successfully!</h3>\";\n            /**/\n\n            const surveyData = sender.data;\n            console.log(\"id \",typeof surveyData.id);\n            console.log(\"task_deadline \",typeof surveyData.task_deadline);\n            console.log(\"reminder_date: \",typeof surveyData.reminder_date);\n\n            const url = '/operation/reminder';\n            \n            // Use fetch to send a POST request\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n            'fetchflag':true,\n            'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify(surveyData)\n            });\n            \n            if (response.ok) {\n            console.log(\"Reminder Set successfully!\");\n            console.log(response);\n            console.log(response.ok);\n            location.reload();\n            \n\n            } else {\n            console.error(\"Failed to update task.\");\n            }\n            } catch (error) {\n            console.error(\"Error sending survey data:\", error);\n            };\n\n            document.querySelector('.btn-close').click();\n            location.reload();\n        }\n\n        \n    </script>\n\n    \n    \n    <script>\n\n        const surveyJson = {\n            pages: [{\n                name: \"PersonalDetails\",\n                title:\"Update\",\n                elements: [{\n                    name: \"id\", \n                    type: \"text\", \n                    inputType: \"numeric\",\n                    visible: false, \n                    isRequired:true\n                    },//{\n                    // type: \"text\",\n                    // name: \"new_task_id\",\n                    // inputType: \"numeric\",\n                    // title: \"Enter New Task ID:\",\n                    // \"validators\": [\n                    //     { \"type\": \"numeric\", \"text\": \"Value must be a number\" }\n                    // ]},\n                    {\n                    type: \"text\",\n                    inputType: \"text\",\n                    name: \"new_task_name\",\n                    title: \"New Task Name:\"\n                    }]\n            }]\n        };\n            \n        const survey = new Survey.Model(surveyJson);\n        survey.applyTheme(SurveyTheme.DefaultDark);\n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendTaskUpdate);\n        \n    </script>\n\n    <!-- reminder setting modal -->\n    <script>\n        function getFormattedDateTimeLocal(date) {\n            const year = date.getFullYear();\n            const month = (date.getMonth() + 1).toString().padStart(2, '0');\n            const day = date.getDate().toString().padStart(2, '0');\n            const hours = date.getHours().toString().padStart(2, '0');\n            const minutes = date.getMinutes().toString().padStart(2, '0');\n            return `${year}-${month}-${day}T${hours}:${minutes}`;\n        }\n\n        const today = new Date();\n\n        const reminderScreen = {\n            // \"title\": \"Task Reminder Setup\",\n            \"elements\": [\n                {\n                \"name\": \"id\", \n                \"type\": \"text\", \n                \"inputType\": \"numeric\",\n                \"visible\": false, \n                \"isRequired\":true\n                },\n                {\n                    \"name\": \"task_deadline\",\n                    \"type\": \"text\",\n                    \"inputType\": \"datetime-local\", \n                    \"title\": \"1. Select the task deadline (date and time):\",\n                    \"placeholder\": \"yyyy-mm-ddThh:mm\",\n                    \"min\": getFormattedDateTimeLocal(today), \n                    \"isRequired\": true\n                },\n                {\n                    \"name\": \"reminder_date\",\n                    \"type\": \"text\",\n                    \"inputType\": \"datetime-local\", \n                    \"title\": \"2. Set a reminder date (date and time):\",\n                    \"description\": \"You can only select a date and time before the deadline.\",\n                    \"isRequired\": true,\n                    \"min\": getFormattedDateTimeLocal(today) \n                    \n                }\n            ]\n        };\n\n        const reminder = new Survey.Model(reminderScreen);\n\n\n        reminder.onValueChanged.add((sender, options) => {\n  \n            if (options.name === 'task_deadline') {\n                const deadline = options.value; \n                const reminderQuestion = sender.getQuestionByName('reminder_date');\n\n                if (reminderQuestion) {\n                    if (deadline) {\n                        // --- THE CORE LOGIC ---\n                        // Set the maximum allowed reminder datetime to be the deadline.\n                        // String comparison works correctly for the \"YYYY-MM-DDTHH:mm\" format.\n                        reminderQuestion.max = deadline;\n\n                        // Now, check if the current reminder is still valid.\n                        const currentReminder = sender.getValue('reminder_date');\n                        if (currentReminder && currentReminder >= deadline) {\n                            // If the reminder is now invalid, clear it to force a new selection.\n                            sender.setValue('reminder_date', null);\n                        }\n                    } else {\n                        // If the deadline is cleared, remove the max constraint from the reminder.\n                        reminderQuestion.max = null;\n                    }\n                }\n            }\n        });\n        \n\n        reminder.onComplete.add(sendTaskReminder);\n\n        reminder.focusFirstQuestionAutomatic = false;\n        reminder.clearInvisibleValues = \"none\";\n\n        // reminder.render(document.getElementById(\"surveyContainer\"));\n        \n            \n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "bab22d443eeaae91"
            ]
        ]
    },
    {
        "id": "bdb2ef05aa69c7e5",
        "type": "template",
        "z": "d30f86340f610285",
        "name": "MainTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <!-- Jquery -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"\n        integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/solid-dark.min.js\"></script>\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n    </style>\n    <script>\n        const taskDataPayload = JSON.parse('{{{payload_json}}}');\n\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/operation/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Add New Task\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details</th>\n                                <th>User</th>\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {{#payload}}\n                            <tr>\n                                <td class=\"{{#done}}text-decoration-line-through{{/done}}\">{{name}}</td>\n                                <td><span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> {{date}},{{time}}</span>\n                                <td>{{username}}</td>\n                                </td>\n                                <td align=\"right\">\n                                    <button\n                                            class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                            data-id=\"{{id}}\"\n                                            data-done=\"{{done}}\">\n                                            <i class=\"bi bi-three-dots-vertical\"></i>\n                                        </button>\n                                </td>\n                            </tr>\n                            {{/payload}}\n                            {{^payload}}\n                            <tr>\n                                <td class=\"text-muted\" colspan=\"4\">Henüz Task yok</td>\n                            </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Update</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n    <div class=\"postion-relative \">\n        <a href=\"/user-management\"\n        class=\" btn btn-primary btn-lg position-fixed top-0 end-0 m-5 shadow\"><i class=\"bi bi-person-vcard\"></i></i></a>\n        \n    </div>\n    <div class=\"postion-relative\">\n        <div class=\"btn-group btn-lg position-fixed bottom-0 end-0 m-5 shadow\">\n            <button class=\"btn btn-light\">{{user.username}}</button>\n            <a href=\"/user-ops/logout\" class=\"btn btn-danger\"><i class=\"bi bi-box-arrow-right\"></i></a>\n        </div>\n        <!-- <a href=\"/user-management\" class=\" btn btn-danger btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-person-circle\"></i></a> -->\n    \n    </div>\n\n\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n\n                <input type=\"hidden\" name=\"id\" value=\"\" class=\"popover-id-input\" />\n\n                <!-- Group of buttons to show when the task is DONE -->\n                <div class=\"done-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/operation/incomplete\" class=\"btn btn-outline-warning\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Mark As Incomplete\"><i class=\"bi bi-x-square\"></i></button>\n                </div>\n\n                <!-- Group of buttons to show when the task is NOT DONE -->\n                <div class=\"not-done-buttons\" style=\"display: contents;\">\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"id\" value=\"\" onclick=\"update_Task(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-secondary btn-reminder\" name=\"id\" value=\"\" onclick=\"set_reminder(this.value,this)\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\" data-bs-placement=\"top\" data-bs-title=\"Set Reminder\"><i class=\"bi bi-bell\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-info\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delay\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                    <button type=\"submit\" formaction=\"/operation/complete\" class=\"btn btn-outline-success\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Complete Task\"><i class=\"bi bi-check2-square\"></i></button>\n                </div>\n\n                <!-- This button is always shown inside the popover -->\n                <button type=\"submit\" formaction=\"/operation/deleteTask\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Task\"><i class=\"bi bi-trash3\"></i></button>\n            </form>\n        </div>\n    </template>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n<!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element\n\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n\n        \n        themeToggleButton.addEventListener('click', () => {\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            \n            const popoverTemplate = document.getElementById('popover-template');\n\n\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n                // Get the unique data from the button's data-* attributes\n                const itemId = popoverTriggerEl.dataset.id;\n                const isDone = popoverTriggerEl.dataset.done === 'true';\n                // Initialize the Bootstrap Popover for this specific button\n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    trigger: 'click manual',\n\n                    content: function () {\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n                        \n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n                        let reminderbtn = contentElement.querySelector('.btn-reminder');\n                        reminderbtn.value = itemId;\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n                        const reminder_tooltip =new bootstrap.Tooltip(reminderbtn);\n\n                        if (isDone) {\n                            contentElement.querySelector('.not-done-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.done-buttons').remove();\n                        }\n\n                        return contentElement;\n                    }\n                });\n                \n\n                // Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        \n        function update_Task(num,obj){\n            const info = {\n                id : num\n            }\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Update\";\n            modalupdate.setAttribute('value', num);\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n            // let popoverList = document.querySelectorAll(\".popover\");\n            // popoverList.forEach(popover =>{\n            //     popover.hide();\n            // });\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            survey.setValue('id',num);\n            // survey.setValue('new_task_id',num);\n            survey.setValue('new_task_name',object_in_q.name);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            survey.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            survey.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            survey.render(document.getElementById(\"surveyContainer\"));\n            \n            \n        };\n        \n        document.addEventListener('DOMContentLoaded', ()=>{\n            document.querySelector('.btn-close').addEventListener('click', ()=>{\n                close_task_update_window();\n            });\n            function close_task_update_window(){\n                survey.clear();\n            };\n        });\n\n        async function sendTaskUpdate(sender){\n\n            const surveyData = sender.data;\n\n            const url = '/operation/updateTask';\n            \n\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n            'fetchflag':true,\n            'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify(surveyData)\n            });\n            \n            if (response.ok) {\n                console.log(\"Task updated successfully!\");\n                console.log(response);\n                console.log(response.ok);\n                location.reload();\n\n\n            } else {\n                console.error(\"Failed to update task.\");\n            }\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        };\n\n        function set_reminder(num,obj){\n            let modalreminder = document.getElementById('staticBackdrop');\n            let modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Set Reminder\";\n            modalreminder.setAttribute('value', num);\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            let default_reminder = (object_in_q.reminder) ? object_in_q.reminder : null;\n            let default_deadline = (object_in_q.deadline) ? object_in_q.deadline : null ;\n            switch (default_reminder){\n                case object_in_q.reminder:\n                    default_reminder = getFormattedDateTimeLocal(new Date(default_reminder));\n                    reminder.setValue('reminder_date',default_reminder);\n                    break;\n                case null :\n                    reminder.clear();\n                    break;\n            }\n            switch (default_deadline){\n                case object_in_q.deadline:\n                    default_deadline = getFormattedDateTimeLocal(new Date(default_deadline));\n                    reminder.setValue('task_deadline',default_deadline);\n                    break;\n                case null :\n                    reminder.clear();\n                    break;\n            }\n            reminder.setValue('id',num);\n            \n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            reminder.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            reminder.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            reminder.render(document.getElementById(\"surveyContainer\"));\n\n        }\n\n        async function sendTaskReminder(sender){\n            console.log(\"Reminder Set:\", JSON.stringify(sender.data, null, 2));\n            sender.completedHtml = \"<h3>Reminder has been set successfully!</h3>\";\n            /**/\n\n            const surveyData = sender.data;\n            console.log(\"id \",typeof surveyData.id);\n            console.log(\"task_deadline \",typeof surveyData.task_deadline);\n            console.log(\"reminder_date: \",typeof surveyData.reminder_date);\n\n            const url = '/operation/reminder';\n            \n\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n            'fetchflag':true,\n            'Content-Type': 'application/json'\n            },\n \n            body: JSON.stringify(surveyData)\n            });\n            \n            if (response.ok) {\n            console.log(\"Reminder Set successfully!\");\n            console.log(response);\n            console.log(response.ok);\n            location.reload();\n            \n            \n\n            } else {\n            console.error(\"Failed to update task.\");\n            }\n            } catch (error) {\n            console.error(\"Error sending survey data:\", error);\n            };\n\n            document.querySelector('.btn-close').click();\n            location.reload();\n        }\n\n        \n    </script>\n\n    \n    \n    <script>\n\n        const surveyJson = {\n            pages: [{\n                name: \"PersonalDetails\",\n                title:\"Update\",\n                elements: [{\n                    name: \"id\", \n                    type: \"text\", \n                    inputType: \"numeric\",\n                    visible: false, \n                    isRequired:true\n                    },//{\n                    // type: \"text\",\n                    // name: \"new_task_id\",\n                    // inputType: \"numeric\",\n                    // title: \"Enter New Task ID:\",\n                    // \"validators\": [\n                    //     { \"type\": \"numeric\", \"text\": \"Value must be a number\" }\n                    // ]},\n                    {\n                    type: \"text\",\n                    inputType: \"text\",\n                    name: \"new_task_name\",\n                    title: \"New Task Name:\"\n                    }]\n            }]\n        };\n            \n        const survey = new Survey.Model(surveyJson);\n        survey.applyTheme(SurveyTheme.DefaultDark);\n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendTaskUpdate);\n        \n    </script>\n\n    <!-- reminder setting modal -->\n    <script>\n        function getFormattedDateTimeLocal(date) {\n            const year = date.getFullYear();\n            const month = (date.getMonth() + 1).toString().padStart(2, '0');\n            const day = date.getDate().toString().padStart(2, '0');\n            const hours = date.getHours().toString().padStart(2, '0');\n            const minutes = date.getMinutes().toString().padStart(2, '0');\n            return `${year}-${month}-${day}T${hours}:${minutes}`;\n        }\n\n        // Get today's date for dynamic min/max values\n        const today = new Date();\n\n        const reminderScreen = {\n            // \"title\": \"Task Reminder Setup\",\n            \"elements\": [\n                {\n                \"name\": \"id\", \n                \"type\": \"text\", \n                \"inputType\": \"numeric\",\n                \"visible\": false, \n                \"isRequired\":true\n                },\n                {\n                    \"name\": \"task_deadline\",\n                    \"type\": \"text\",\n                    \"inputType\": \"datetime-local\", \n                    \"title\": \"1. Select the task deadline (date and time):\",\n                    \"placeholder\": \"yyyy-mm-ddThh:mm\",\n                    \"min\": getFormattedDateTimeLocal(today), \n                    \"isRequired\": true\n                },\n                {\n                    \"name\": \"reminder_date\",\n                    \"type\": \"text\",\n                    \"inputType\": \"datetime-local\", \n                    \"title\": \"2. Set a reminder date (date and time):\",\n                    \"description\": \"You can only select a date and time before the deadline.\",\n                    \"isRequired\": true,\n                    \"min\": getFormattedDateTimeLocal(today) \n                    // The 'max' attribute will be set dynamically by our code\n                }\n            ]\n        };\n\n        // Create the survey model\n        const reminder = new Survey.Model(reminderScreen);\n\n        // This event fires every time a question's value changes.\n        reminder.onValueChanged.add((sender, options) => {\n            if (options.name === 'task_deadline') {\n                const deadline = options.value; // Get the new deadline datetime string\n                const reminderQuestion = sender.getQuestionByName('reminder_date');\n\n                if (reminderQuestion) {\n                    if (deadline) {\n                        // --- THE CORE LOGIC ---\n                        // Set the maximum allowed reminder datetime to be the deadline.\n                        // String comparison works correctly for the \"YYYY-MM-DDTHH:mm\" format.\n                        reminderQuestion.max = deadline;\n\n                        // Now, check if the current reminder is still valid.\n                        const currentReminder = sender.getValue('reminder_date');\n                        if (currentReminder && currentReminder >= deadline) {\n                            // If the reminder is now invalid, clear it to force a new selection.\n                            sender.setValue('reminder_date', null);\n                        }\n                    } else {\n                        // If the deadline is cleared, remove the max constraint from the reminder.\n                        reminderQuestion.max = null;\n                    }\n                }\n            }\n        });\n        \n        reminder.onComplete.add(sendTaskReminder);\n\n        reminder.focusFirstQuestionAutomatic = false;\n        reminder.clearInvisibleValues = \"none\";\n        reminder.render(document.getElementById(\"surveyContainer\"));\n        \n            \n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 880,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f2597b2ecbc0bfe0",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 23",
        "func": "const validateEmail = (email) => {\n    const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return emailRegex.test(email);\n};\n\nif(msg.formData.email){\n    \n    \n    if (!validateEmail(msg.formData.email)) {\n        msg.payload.error = \"A valid email address is required.\";\n        msg.error={\n            message : msg.payload.error\n        }\n        return [null, msg]; \n    }\n}\nmsg.payload = { email: msg.formData.email }\n\n    \nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1460,
        "wires": [
            [
                "13e64c62a1280976"
            ],
            [
                "8e23a29f747e664d"
            ]
        ]
    },
    {
        "id": "13e64c62a1280976",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 400,
        "y": 1440,
        "wires": [
            [
                "8f8b6df248d01d66"
            ]
        ]
    },
    {
        "id": "90e54b350333945d",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 30",
        "mode": "link",
        "links": [
            "f36cbc3a17419934"
        ],
        "x": 475,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f36cbc3a17419934",
        "type": "link in",
        "z": "d30f86340f610285",
        "name": "link in 7",
        "links": [
            "90e54b350333945d"
        ],
        "x": 125,
        "y": 1460,
        "wires": [
            [
                "f2597b2ecbc0bfe0"
            ]
        ]
    },
    {
        "id": "8f8b6df248d01d66",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 24",
        "func": "if(msg.payload){\n    msg.payload={\n        error:\"This email address is already in use.\"\n    }\n    msg.error = {\n        message: msg.payload.error\n    }\n    return [null, msg];\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1440,
        "wires": [
            [
                "43753c840599da0f"
            ],
            [
                "6a11f859f7025538"
            ]
        ]
    },
    {
        "id": "6a11f859f7025538",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 700,
        "y": 1460,
        "wires": []
    },
    {
        "id": "8e23a29f747e664d",
        "type": "link out",
        "z": "d30f86340f610285",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "470464e871d62c10"
        ],
        "x": 355,
        "y": 1500,
        "wires": []
    },
    {
        "id": "43753c840599da0f",
        "type": "bcrypt",
        "z": "d30f86340f610285",
        "name": "",
        "action": "encrypt",
        "field": "formData.password",
        "hash": "payload",
        "target": "formData.password",
        "assignment": "assign",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 690,
        "y": 1420,
        "wires": [
            [
                "a63cbbd50895c557"
            ]
        ]
    },
    {
        "id": "a63cbbd50895c557",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 25",
        "func": "const date = new Date();\nconst now = date.getTime();\n\nmsg.payload = {\n    _id: now,\n    user_id: now,\n    username: msg.formData.username,\n    password: msg.formData.password,\n    role: ['Miamiasme'],\n    email: msg.formData.email,\n    isActive: true,\n    stamp: {\n        CreatedAt: now,\n        ip: msg.req.ip,\n        username: msg.formData.username,\n        email: msg.formData.email,\n    },\n    tasklist: [],\n    date: date.toLocaleDateString(),\n    time: date.toLocaleTimeString()\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1400,
        "wires": [
            [
                "2693f7f301da7032"
            ]
        ]
    },
    {
        "id": "2693f7f301da7032",
        "type": "mongodb4",
        "z": "d30f86340f610285",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1000,
        "y": 1400,
        "wires": [
            [
                "f6bdf94d9214e45e"
            ]
        ]
    },
    {
        "id": "b47c59b2e6f68851",
        "type": "http response",
        "z": "d30f86340f610285",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1320,
        "y": 1400,
        "wires": []
    },
    {
        "id": "f6bdf94d9214e45e",
        "type": "function",
        "z": "d30f86340f610285",
        "name": "function 26",
        "func": "msg.payload={message:'Siqn-up successful :)'}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1400,
        "wires": [
            [
                "b47c59b2e6f68851"
            ]
        ]
    },
    {
        "id": "70ebc6b182e04a81",
        "type": "http in",
        "z": "a03c0d2416f8ec45",
        "name": "operation",
        "url": "/pos/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 120,
        "wires": [
            [
                "68f73c42653ada82"
            ]
        ]
    },
    {
        "id": "183fae55df055b31",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "validation",
        "func": "const typeLookup={\n    deleteTask : {\n        title: \"delete\",\n        rqA: \"id\"\n    },\n    complete : {\n        title: \"complete\",\n        rqA: \"id\"\n    },\n    incomplete : {\n        title: \"incomplete\",\n        rqA: \"id\"\n    }, \n    add : {\n        title: \"add\",\n        rqA: \"name\"\n    },\n    updateTask:{\n        title:\"update\",\n        rqA:\"id\"\n    },\n    reminder:{\n        title:\"set reminder\",\n        rqA:\"id\"\n    }\n}\n\n\nif(!Object.keys(typeLookup).includes(msg.req.params.type)){\n    msg.error = {\n        message: `Request Type Error: ${msg.req.params.type}. \\n Unsupported request type. `\n    }\n    return [null,msg]\n}\n\nif(!msg.payload[typeLookup[msg.req.params.type].rqA]){\n    msg.error = {\n        message: `The task you wanted to ${typeLookup[msg.req.params.type].title} must have an/a ${typeLookup[msg.req.params.type].rqA}.`\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "b3337e8933d0acf0",
                "e1d39102f7dd03b1"
            ],
            [
                "79d0853edc7a3678"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "b3337e8933d0acf0",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "db.todo.handler()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst date = new Date();\nconst now = date.getTime();\nfunction updateTaskStamp(obj){\n    obj.stamp = {\n        CreatedAt: now,\n        ip: msg.req.ip,\n        username: obj.stamp.username || \"\",\n        email: obj.stamp.email || \"\",\n        user_id: msg.stamp.user_id || \"\",\n    }\n    obj.date = date.toLocaleDateString()\n    obj.time = date.toLocaleTimeString()\n}\n\nif(msg.req.params.type === 'add'){\n    msg.payload ={\n        id: now,\n        name: msg.payload.name,\n        done: false,\n        stamp: {\n            CreatedAt: now,\n            ip: msg.req.ip,\n            user_id : msg.user.user_id || \"\",\n            username: msg.user.username || \"\",\n            email: msg.user.email || \"\",\n        },\n        date : date.toLocaleDateString(),\n        time : date.toLocaleTimeString()\n        \n    }\n\n}else{\n    \n    const index = todo.findIndex(x => x.id == msg.payload.id)\n    if (!~index) {\n        msg.error = {\n            message: \"No matching task found with the ID.\"\n        }\n        return [null, msg,null]\n    }\n    if (todo[index].stamp.user_id !== msg.user.user_id && !msg.user.role.includes('Simiabraz')){\n        msg.error = {\n            message: \"You do not have permission for this operation.\"\n        }\n        msg.payload.error =msg.error.message\n        return [null, msg, null]\n    }\n    switch (msg.req.params.type) {\n        case \"deleteTask\":\n            todo.splice(index, 1)\n            break;\n        case \"complete\":\n            todo[index].done = true;\n            updateTaskStamp(todo[index]);\n            break;\n        case \"incomplete\":\n            todo[index].done = false;\n            updateTaskStamp(todo[index]);\n            break;\n        case \"updateTask\":\n            if (todo[index].done == false){\n                if (!msg.payload.new_task_id) {\n                    msg.error = {\n                        message: \"New Task ID cannot be empty.\"\n                    }\n                    return [null, msg,null]\n                }\n                if (!msg.payload.new_task_name) {\n                    msg.error = {\n                        message: \"New Task Name cannot be empty.\"\n                    }\n                    return [null, msg,null]\n                }\n                todo[index].id = msg.payload.new_task_id;\n                todo[index].name = msg.payload.new_task_name;\n                updateTaskStamp(todo[index]);\n                msg.payload = { status: \"success\", message: \"Completed successfuly.\" };\n            }else{\n                msg.error = {\n                    message: \"You cannot update a task that has been completed.\"\n                }\n                return [null, msg,null]\n            }\n            break;\n        case \"reminder\":\n\n            let errflag = false;\n            let errmessage = \"\";\n            \n            if(todo[index].done == false){\n                //validate if the task_deadline and the reminder_date represent actual dates?\n                //validate if the task_deadline and reminder_date aren't in the past?\n                //validate if the reminder_date is between today and task_deadline?\n                const taskDeadline = new Date(msg.payload.task_deadline);\n                const reminderDate = new Date(msg.payload.reminder_date);\n                let some_message = \"Deadline or reminder contains invalid date or time.\" + \"Deadline: \" + taskDeadline + \" Reminder:\" + reminderDate;\n                if(taskDeadline.toString() === \"Invalid Date\" || reminderDate.toString()==='Invalid Date')\n                {\n                    msg.error = {\n                        message: \"Deadline or reminder contains invalid date or time [1].\"\n                    }\n                    return [null, msg, null]\n                }\n                switch (true) {\n                    case reminderDate > taskDeadline:\n                        errflag = true;\n                        errmessage = \"You cannot set a reminder that exceeds the deadline [2].\";\n                        break;\n                    case reminderDate < date:\n                        errflag = true;\n                        errmessage = \"You cannot set a reminder in the past [3].\";\n                        break;\n                    case taskDeadline < date:\n                        errflag = true;\n                        errmessage = \"You cannot set a deadline in the past [4].\";\n                        break;\n                    default:\n                        break;\n                }\n                if(errflag){\n                    msg.error = {\n                        message: \"Deadline or reminder contains invalid date or time [5]. \" + errmessage\n                    }\n                    return [null, msg, null];\n                }\n                todo[index].reminder = reminderDate;\n                todo[index].deadline = taskDeadline;\n                todo[index].reminderSetup = {\n                    \"crontiMethod\": \"onDate\",\n                    \"crontiArgs\": [\n                        this.reminder,\n                    ]\n                };\n                msg.from = \"noreply <noreply@emirhan>\"\n                msg.topic = todo[index].name;\n                msg.payload={\n                    \"crontiMethod\": \"onDate\",\n                    \"crontiArgs\": [\n                            msg.payload.reminder_date,\n                        ]\n                }\n                // In-Memory shceduling / alternatively we can apply the Crontab method which works on OS level\n            }else{\n                msg.error = {\n                    message: \"You cannot set a reminder for a task that has been completed.\"\n                }\n                return [null,msg, null];\n            }\n            break;\n        default:\n    }\n}\nDB.todo = todo\n\nglobal.set(\"DB\",DB)\n\n\nreturn (msg.req.params.type ===\"reminder\") ? [null,null,msg] : msg ;",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 100,
        "wires": [
            [
                "2d2495cbfa2d2f9e",
                "6a91741ccf7d22ca"
            ],
            [
                "35c3fae8b2b050ff",
                "b323facdfbb5e488"
            ],
            [
                "34b41ee939d9bd96",
                "9a1da310ad39d1d6",
                "b59ee3c91fc3b37a"
            ]
        ],
        "outputLabels": [
            "handler",
            "Error",
            "reminder"
        ]
    },
    {
        "id": "2d2495cbfa2d2f9e",
        "type": "http response",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 860,
        "y": 80,
        "wires": []
    },
    {
        "id": "35c3fae8b2b050ff",
        "type": "link out",
        "z": "a03c0d2416f8ec45",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "6174979e5eaf9458"
        ],
        "x": 845,
        "y": 120,
        "wires": []
    },
    {
        "id": "79d0853edc7a3678",
        "type": "link out",
        "z": "a03c0d2416f8ec45",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "6174979e5eaf9458"
        ],
        "x": 565,
        "y": 160,
        "wires": []
    },
    {
        "id": "6eef4f06f6f1baf0",
        "type": "comment",
        "z": "a03c0d2416f8ec45",
        "name": "send e-mail",
        "info": "send e-mail",
        "x": 910,
        "y": 240,
        "wires": []
    },
    {
        "id": "6a91741ccf7d22ca",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "Usual business",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 40,
        "wires": []
    },
    {
        "id": "b323facdfbb5e488",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "1d61e95d526ccd42",
        "type": "http response",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "34b41ee939d9bd96",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "reloader()",
        "func": "msg.payload = { status: \"success\", message: \"Completed successfuly.\" };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "1d61e95d526ccd42"
            ]
        ]
    },
    {
        "id": "9a1da310ad39d1d6",
        "type": "crontinject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 890,
        "y": 200,
        "wires": [
            [
                "a70176042c048b2f",
                "c91de41563441f74"
            ]
        ]
    },
    {
        "id": "3f3fb71c23e420ad",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "nail biter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 240,
        "wires": []
    },
    {
        "id": "a70176042c048b2f",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "duplicate checker",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 200,
        "wires": []
    },
    {
        "id": "c91de41563441f74",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "borderGate",
        "func": "let date = new Date();\nlet reminder = new Date (msg.payload.crontiArgs[0])\ndate.setSeconds(0,0);\nif(date.getTime() === reminder.getTime()){\n    return msg;\n}\nelse{\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "3f3fb71c23e420ad",
                "822f2fd415d1d8b0"
            ]
        ]
    },
    {
        "id": "b59ee3c91fc3b37a",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "reminder",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "fbab1ba1196fbcfc",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DB.todo",
        "payloadType": "global",
        "x": 500,
        "y": 220,
        "wires": [
            [
                "6fcf358598b79dd4"
            ]
        ]
    },
    {
        "id": "6fcf358598b79dd4",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "passReminder()",
        "func": "let date = new Date();\ndate.setSeconds(0,0);\ndate=date.getTime();\n\nmsg.payload.forEach(x=> {\n    if(x.reminder && date< x.reminder.getTime()){\n        let payload = {\n            \"crontiMethod\": \"onDate\",\n            \"crontiArgs\": [\n                msg.payload.reminder_date,\n            ]\n        }\n        node.send({payload})\n    }\n    else{\n        x.reminder = null;\n    }\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "9a1da310ad39d1d6"
            ]
        ]
    },
    {
        "id": "e1d39102f7dd03b1",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "68f73c42653ada82",
        "type": "subflow:c0526da0e6440e34",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "183fae55df055b31"
            ]
        ]
    },
    {
        "id": "822f2fd415d1d8b0",
        "type": "template",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<title>Title attempt</title>\n<h1>Topic attempt</h1>\n<p>Eureka it works</p>\n<br>\n<p>This is a reminder.</p>",
        "output": "str",
        "x": 1220,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f17a9b478b405da7",
        "type": "http in",
        "z": "a03c0d2416f8ec45",
        "name": "testers",
        "url": "/test",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 300,
        "wires": [
            [
                "9d35a632a26c78bd"
            ]
        ]
    },
    {
        "id": "2b66a03f204f2260",
        "type": "http response",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 300,
        "wires": []
    },
    {
        "id": "9d35a632a26c78bd",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "db.todo.find()",
        "func": "const DB = global.get(\"DB\")\nmsg.payload = DB.todo;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 300,
        "wires": [
            [
                "d92ddcf49d8e662c"
            ]
        ]
    },
    {
        "id": "d92ddcf49d8e662c",
        "type": "template",
        "z": "a03c0d2416f8ec45",
        "name": "testTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <!-- Using CDN for bootstrap for this example to work standalone -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n\n        // modal update form\n\n\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                <form action=\"/operation/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Big Man Charizard\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details</th>\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <!-- \n                                NODE-RED WILL RENDER THE TABLE ROWS HERE \n                                using the Mustache.js template below.\n                            -->\n                            {{#payload}}\n                            <tr>\n                                <td class=\"{{#done}}text-decoration-line-through{{/done}}\">{{name}}</td>\n                                <td><span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> {{date}},{{time}}</span>\n                                </td>\n                                <td align=\"right\">\n                                    <!-- \n                                            This is the trigger button.\n                                            - It has a CLASS, not an ID.\n                                            - It stores the task's data.\n                                        -->\n                                    <button\n                                            class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                            data-id=\"{{id}}\"\n                                            data-done=\"{{done}}\">\n                                            <i class=\"bi bi-three-dots-vertical\"></i>\n                                        </button>\n                                </td>\n                            </tr>\n                            {{/payload}}\n                            {{^payload}}\n                            <tr>\n                                <td class=\"text-muted\" colspan=\"3\">Henüz Task yok</td>\n                            </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Modal title</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n                    <button type=\"button\" class=\"btn btn-primary\">Understood</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n\n    <!-- \n      THE TEMPLATE FOR THE POPOVER\n      This holds the HTML for the popover's content. It's invisible on the page\n      but the script below will use it.\n    -->\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n                <!-- The script will put the correct item ID here -->\n                <input type=\"hidden\" name=\"id\" value=\"\" class=\"popover-id-input\" />\n\n                <!-- Group of buttons to show when the task is DONE -->\n                <div class=\"done-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/operation/incomplete\" class=\"btn btn-outline-warning\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Mark As Incomplete\"><i class=\"bi bi-x-square\"></i></button>\n                </div>\n\n                <!-- Group of buttons to show when the task is NOT DONE -->\n                <div class=\"not-done-buttons\" style=\"display: contents;\">\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"id\" value=\"\" onclick=\"update_Task(this.value)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Set Reminder\"><i class=\"bi bi-bell\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-info\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delay\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                    <button type=\"submit\" formaction=\"/operation/complete\" class=\"btn btn-outline-success\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Complete Task\"><i class=\"bi bi-check2-square\"></i></button>\n                </div>\n\n                <!-- This button is always shown inside the popover -->\n                <button type=\"submit\" formaction=\"/operation/deleteTask\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Task\"><i class=\"bi bi-trash3\"></i></button>\n            </form>\n        </div>\n    </template>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n    <script>\n        // Find the button by its ID\n            const modalTooltipButtons = document.querySelectorAll('.btn-update');\n            \n            modalTooltipButtons.forEach(modalButton ()=>{\n                const tooltip = new bootstrap.Tooltip(modalButton);\n            });\n    </script>\n\n    <script>\n        // This script will run in the user's browser AFTER Node-RED has rendered the page.\n        document.addEventListener('DOMContentLoaded', () => {\n            \n            // Get the HTML template for the popover's content\n            const popoverTemplate = document.getElementById('popover-template');\n\n            // Find ALL the buttons that need a popover (which were created by Node-RED)\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            // Loop through each trigger button\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n                // Get the unique data from the button's data-* attributes\n                const itemId = popoverTriggerEl.dataset.id;\n                const isDone = popoverTriggerEl.dataset.done === 'true';\n\n                // Initialize the Bootstrap Popover for this specific button\n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    // *** THE FIX IS HERE ***\n                    // Use a function for the content. This function runs EVERY TIME the popover is opened.\n                    content: function () {\n                        // B. Create a FRESH copy of the template's content\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n                        \n                        // C. Modify the copied content\n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n\n\n                        // Show or hide the correct set of buttons based on the 'done' status\n                        if (isDone) {\n                            contentElement.querySelector('.not-done-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.done-buttons').remove();\n                        }\n\n                        // D. Return the freshly prepared HTML element for Bootstrap to use\n                        return contentElement;\n                    }\n                });\n                \n\n                // E. Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        \n        function update_Task(num){\n            console.log(num);\n            const info = {\n                id : num\n            }\n            console.log(\"info object\");\n            console.log(info);\n            console.log(\"id\");\n            console.log(info.id);\n            const modalupdate = document.getElementById('staticBackdrop');\n            modalupdate.setAttribute('value', num);\n            \n\n        };\n        \n    </script>\n\n    <!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element\n\n        // --- PART A: APPLY SAVED THEME ON PAGE LOAD ---\n\n        // This self-executing function applies the theme immediately.\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n\n        // --- PART B: HANDLE THE BUTTON CLICK ---\n        \n        themeToggleButton.addEventListener('click', () => {\n            // Check the current theme and toggle it\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n            // Set the new theme on the <html> element\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n            \n            // Save the new theme to localStorage\n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n    \n    <script>\n\n\n    const surveyJson = {\n    pages: [{\n        name: \"PersonalDetails\",\n        elements: [{\n        type: \"text\",\n        name: \"FirstName\",\n        title: \"Enter your first name:\"\n        }, {\n        type: \"text\",\n        name: \"LastName\",\n        title: \"Enter your last name:\"\n        }, {\n        type: \"panel\",\n        name: \"Contacts\",\n        state: \"collapsed\",\n        title: \"Contacts (optional)\",\n        elements: [{\n            type: \"text\",\n            name: \"Telegram\",\n            title: \"Telegram:\"\n        }, {\n            type: \"text\",\n            name: \"GitHub\",\n            title: \"GitHub username:\"\n        }]\n        }]\n    }]\n    };\n\n    const survey = new Survey.Model(surveyJson);\n    survey.focusFirstQuestionAutomatic = false;\n\n    document.addEventListener(\"DOMContentLoaded\", function() {\n    survey.render(document.getElementById(\"surveyContainer\"));\n    });\n\n    </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 430,
        "y": 300,
        "wires": [
            [
                "2b66a03f204f2260"
            ]
        ]
    },
    {
        "id": "a08264d85944eadd",
        "type": "link out",
        "z": "a03c0d2416f8ec45",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "6174979e5eaf9458"
        ],
        "x": 325,
        "y": 480,
        "wires": []
    },
    {
        "id": "21237f600a673eec",
        "type": "comment",
        "z": "a03c0d2416f8ec45",
        "name": "send e-mail",
        "info": "send e-mail",
        "x": 390,
        "y": 820,
        "wires": []
    },
    {
        "id": "601b50c5a26e9444",
        "type": "http response",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 520,
        "y": 740,
        "wires": []
    },
    {
        "id": "32bb5d77cd211df3",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "reloader()",
        "func": "msg.payload = { status: \"success\", message: \"Completed successfuly.\" };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 740,
        "wires": [
            [
                "601b50c5a26e9444"
            ]
        ]
    },
    {
        "id": "59ca1ec10bfa0e99",
        "type": "crontinject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 370,
        "y": 780,
        "wires": [
            [
                "def835f48ae2d0f0",
                "5e874bcf1369c1f6"
            ]
        ]
    },
    {
        "id": "34a93eaca0eaf92a",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "nail biter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 820,
        "wires": []
    },
    {
        "id": "def835f48ae2d0f0",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "duplicate checker",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 780,
        "wires": []
    },
    {
        "id": "5e874bcf1369c1f6",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "borderGate",
        "func": "let date = new Date();\nlet reminder = new Date (msg.payload.crontiArgs[0])\ndate.setSeconds(0,0);\nif(date.getTime() === reminder.getTime()){\n    return msg;\n}\nelse{\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "34a93eaca0eaf92a",
                "6bc2614d35cf5342"
            ]
        ]
    },
    {
        "id": "716a82567ec42f86",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "reminder",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 600,
        "wires": []
    },
    {
        "id": "6bc2614d35cf5342",
        "type": "template",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<title>Title attempt</title>\n<h1>Topic attempt</h1>\n<p>Eureka it works</p>\n<br>\n<p>This is a reminder.</p>",
        "output": "str",
        "x": 700,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "6138270081da9e4d",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DB.todo",
        "payloadType": "global",
        "x": 300,
        "y": 640,
        "wires": [
            [
                "b0cc97b48ac4db12"
            ]
        ]
    },
    {
        "id": "b0cc97b48ac4db12",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "passReminder()",
        "func": "let date = new Date();\ndate.setSeconds(0,0);\ndate=date.getTime();\n\nmsg.payload.forEach(x=> {\n    if(x.reminder && date< x.reminder.getTime()){\n        let payload = {\n            \"crontiMethod\": \"onDate\",\n            \"crontiArgs\": [\n                msg.payload.reminder_date,\n            ]\n        }\n        node.send({payload})\n    }\n    else{\n        x.reminder = null;\n    }\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 640,
        "wires": [
            [
                "59ca1ec10bfa0e99"
            ]
        ]
    },
    {
        "id": "5215d5b2b4cff222",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 440,
        "wires": []
    },
    {
        "id": "962a6625cf7f75b2",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "placeholder",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 560,
        "wires": [
            [
                "716a82567ec42f86",
                "59ca1ec10bfa0e99",
                "32bb5d77cd211df3"
            ]
        ]
    },
    {
        "id": "6c06e89a567bafa6",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "placeholder2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 500,
        "wires": [
            [
                "a08264d85944eadd",
                "5215d5b2b4cff222"
            ]
        ]
    },
    {
        "id": "0d03f210c72a0461",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "db.user.handler()",
        "func": "/*\n{\n    user_id: now,\n    username: \"Admin\",\n    password: \"KendraTwo\",\n    role:\"Simiabraz\",\n    isActive: true,\n    email:\"emirgormus2555@gmail.com\",\n    stamp: {\n        CreatedAt: now,\n        ip: \"127.0.0.1\",\n        email: \"emirgormus2555@gmail.com\",\n    },\n    tasklist : [],\n    date : date.toLocaleDateString(),\n    time : date.toLocaleTimeString()\n}\n\n*/\n\nconst DB = global.get(\"DB\")\nlet users = DB.users\n\nconst date = new Date();\nconst now = date.getTime();\nfunction updateUserStamp(obj){\n    obj.stamp = {\n        CreatedAt: now,\n        ip: msg.req.ip,\n        username: msg.payload.username,\n        email: (msg.payload.email) ? msg.payload.email : \"\",\n    }\n    obj.date = date.toLocaleDateString()\n    obj.time = date.toLocaleTimeString()\n}\n\nif(msg.req.params.type === 'add-user'){\n    // const last = users[users.length];\n    // let new_user_id = last.user_id +1;\n\n    users.push({\n        _id:now,\n        user_id: now,\n        username: msg.payload.username,\n        password: msg.payload.password,\n        role: [msg.payload.role],\n        email: (msg.payload.email) ? msg.payload.email : \"\",\n        isActive: false,\n        stamp: {\n            CreatedAt: now,\n            ip: msg.req.ip,\n            username: msg.user.username,\n            email: (msg.user.email) ? msg.user.email : \"\",\n        },\n        tasklist:[],\n        date : date.toLocaleDateString(),\n        time : date.toLocaleTimeString()\n\n        \n    })\n    \n\n}else{\n    const index = users.findIndex(x => x.user_id == msg.payload.user_id)\n    if (!~index) {\n        msg.error = {\n            message: \"No matching user found with the ID.\"\n        }\n        return [null, msg]\n    }\n    switch (msg.req.params.type) {\n        case \"delete-user\":\n            users.splice(index, 1)\n            break;\n        case \"activate-user\":\n            users[index].isActive = true;\n            updateUserStamp(users[index]);\n            break;\n        case \"deactivate-user\":\n            users[index].isActive = false;\n            updateUserStamp(users[index]);\n            break;\n        case \"update-user\":\n            if (users[index].isActive == true){\n                if (!msg.payload.username) {\n                    msg.error = {\n                        message: \"Username cannot be empty.\"\n                    }\n                    return [null, msg]\n                }\n                if (!msg.payload.password) {\n                    msg.error = {\n                        message: \"Password cannot be empty.\"\n                    }\n                    return [null, msg]\n                }\n                if (!msg.payload.role) {\n                    msg.error = {\n                        message: \"Role cannot be empty.\"\n                    }\n                    return [null, msg]\n                }\n                users[index].username = msg.payload.username;\n                users[index].password = msg.payload.password;\n                users[index].role = [msg.payload.role];\n                users[index].email = (msg.payload.email) ? msg.payload.email : users[index].email;\n                updateUserStamp(users[index]);\n                msg.payload = { status: \"success\", message: \"Completed successfuly.\" };\n            }else{\n                msg.error = {\n                    message: \"You cannot update an inactive user.\"\n                }\n                return [null, msg]\n            }\n            break;\n        default:\n            break;\n    }\n}\nDB.users = users;\n\nglobal.set(\"DB\",DB)\n\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            [
                "e72b6b92c073c12d"
            ],
            [
                "bcab9fbb35a35ad9",
                "99cffbfe61789051"
            ]
        ],
        "outputLabels": [
            "handler",
            "Error"
        ]
    },
    {
        "id": "e72b6b92c073c12d",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "succesful op",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 340,
        "wires": []
    },
    {
        "id": "bcab9fbb35a35ad9",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "err 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 480,
        "wires": []
    },
    {
        "id": "99cffbfe61789051",
        "type": "link out",
        "z": "a03c0d2416f8ec45",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "3edd930c0aa7b137"
        ],
        "x": 645,
        "y": 460,
        "wires": []
    },
    {
        "id": "9d8738394fb662aa",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 150,
        "y": 980,
        "wires": [
            [
                "760dcef73408f554"
            ]
        ]
    },
    {
        "id": "8ed8511a62f84aa2",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 980,
        "wires": []
    },
    {
        "id": "760dcef73408f554",
        "type": "mongodb4",
        "z": "a03c0d2416f8ec45",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 360,
        "y": 980,
        "wires": [
            [
                "8ed8511a62f84aa2"
            ]
        ]
    },
    {
        "id": "5744684bbca85c43",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"_id\":1760964331234,\"user_id\":1760964331234,\"username\":\"administrator\",\"password\":\"$2a$10$R4pRyg31tpDYQVYHLQnhK.URZIXyXrS7OZky9gJw1bXCqdFesXFK6\",\"role\":[\"Simiabraz\"],\"isActive\":true,\"email\":\"emirgormus2555@gmail.com\",\"stamp\":{\"CreatedAt\":1760964331234,\"ip\":\"127.0.0.1\",\"username\":\"administrator\",\"email\":\"emirgormus2555@gmail.com\"},\"tasklist\":[],\"date\":\"20.10.2025\",\"time\":\"16: 56: 49\"}",
        "payloadType": "json",
        "x": 150,
        "y": 1060,
        "wires": [
            [
                "e9977218e7d39964"
            ]
        ]
    },
    {
        "id": "93a9a44e25ce48d0",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e9977218e7d39964",
        "type": "mongodb4",
        "z": "a03c0d2416f8ec45",
        "clientNode": "1c790cf32d0ec66f",
        "mode": "collection",
        "collection": "users",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "93a9a44e25ce48d0"
            ]
        ]
    },
    {
        "id": "f1ae08d7aa9a3624",
        "type": "bcrypt",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "action": "encrypt",
        "field": "payload.password",
        "hash": "payload",
        "target": "payload.password",
        "assignment": "assign",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 450,
        "y": 1120,
        "wires": [
            [
                "42fc7b2fb73a64ea"
            ]
        ]
    },
    {
        "id": "fcde5e60bf19066a",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"password\":\"pandas\"}",
        "payloadType": "json",
        "x": 200,
        "y": 1120,
        "wires": [
            [
                "f1ae08d7aa9a3624"
            ]
        ]
    },
    {
        "id": "42fc7b2fb73a64ea",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1120,
        "wires": []
    },
    {
        "id": "93164a070f682083",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1580,
        "wires": [
            [
                "2d89302fc5743be1"
            ]
        ]
    },
    {
        "id": "2d89302fc5743be1",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "function 1",
        "func": "const DB = global.get(\"DB\") || {\n    todo: [],\n    wodo: [],\n    users: [] //todo: bir koleksiyona denk gelir []: veriye denk gelir.\n}\nDB.users = [];\nglobal.set(\"DB\", DB)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "765293ca077c0899",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 1580,
        "wires": [
            [
                "e2c80850cb151bfc",
                "0314e3cdfabe2bcb"
            ]
        ]
    },
    {
        "id": "e2c80850cb151bfc",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "function 2",
        "func": "const DB = global.get(\"DB\");\nlet date = new Date();\nlet now = date.getTime();\nlet users = DB.users\nusers.push(\n        {\n            user_id: 1,\n            username: \"administrator\",\n            password: \"$2a$10$R4pRyg31tpDYQVYHLQnhK.URZIXyXrS7OZky9gJw1bXCqdFesXFK6\",\n            role:[\"Simiabraz\"],\n            isActive: true,\n            email:\"emirgormus2555@gmail.com\",\n            stamp: {\n                CreatedAt: 1,\n                ip: \"127.0.0.1\",\n                username:\"administrator\",\n                email: \"emirgormus2555@gmail.com\",\n            },\n            tasklist : [],\n            date : date.toLocaleDateString(),\n            time : date.toLocaleTimeString()\n        }\n)\nDB.users = users;\nglobal.set(\"DB\", DB)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1580,
        "wires": [
            [
                "1d52d0bb22646f7a"
            ]
        ]
    },
    {
        "id": "0314e3cdfabe2bcb",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1620,
        "wires": []
    },
    {
        "id": "1d52d0bb22646f7a",
        "type": "debug",
        "z": "a03c0d2416f8ec45",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1580,
        "wires": []
    },
    {
        "id": "c9172f102bb45c59",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 940,
        "y": 1580,
        "wires": [
            [
                "bb8a06931fc9ac2d"
            ]
        ]
    },
    {
        "id": "bb8a06931fc9ac2d",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "function 3",
        "func": "const DB = global.get(\"DB\");\nlet date = new Date();\nlet now = date.getTime();\nlet users = DB.users\nlet index = users.findIndex(x => x.username == \"Admin\");\nusers[index].isActive = (users[index].isActive) ? false : true;\n// users.splice(index,1);\nDB.users = users;\nglobal.set(\"DB\", DB)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "bcfb3573b3d52e01",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1660,
        "wires": [
            [
                "7602b950b69bfc44"
            ]
        ]
    },
    {
        "id": "7602b950b69bfc44",
        "type": "function",
        "z": "a03c0d2416f8ec45",
        "name": "DB",
        "func": "// Flush DB\nglobal.set(\"DB\",{\n    todo:[],\n    wodo:[],\n    users:[]\n})",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst DB = global.get(\"DB\") || {\n    todo: [],\n    wodo: [],\n    users: [] //todo: bir koleksiyona denk gelir []: veriye denk gelir.\n}\nglobal.set(\"DB\", DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1660,
        "wires": []
    },
    {
        "id": "603eeed03545b4c0",
        "type": "template",
        "z": "a03c0d2416f8ec45",
        "name": "DatatableJS template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User List</title>\n    <!-- Bootstrap 5 CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- Bootstrap Icons -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n    <!-- DataTables Bootstrap 5 CSS -->\n    <link href=\"https://cdn.datatables.net/2.0.8/css/dataTables.bootstrap5.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n    <div class=\"container my-5\">\n        <div class=\"table-responsive mt-5 border rounded\">\n            <!-- \n                This is the table \"shell\". \n                We only define the <thead>. \n                DataTables will build the <tbody> automatically.\n            -->\n            <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                <thead>\n                    <tr>\n                        <!-- These headers must match your columns -->\n                        <th>User Name</th>\n                        <th>Date, Time</th>\n                        <th>Role</th>\n                        <th>Status</th>\n                        <th style=\"text-align: right;\">Actions</th>\n                    </tr>\n                </thead>\n                <!-- The <tbody> will be generated by DataTables -->\n                <tbody>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n    <!-- jQuery (required by DataTables) -->\n    <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\n    <!-- Bootstrap 5 JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\n    <!-- DataTables JS -->\n    <script src=\"https://cdn.datatables.net/2.0.8/js/dataTables.min.js\"></script>\n    <!-- DataTables Bootstrap 5 JS -->\n    <script src=\"https://cdn.datatables.net/2.0.8/js/dataTables.bootstrap5.min.js\"></script>\n\n    <script>\n        $(document).ready(function() {\n            // 1. Get the payload data from Node-RED\n            // We parse the JSON string that you passed in msg.payload\n            const taskDataPayload = JSON.parse('{{{payload}}}');\n\n            // 2. Initialize DataTables\n            $('#task-table').DataTable({\n                // This is your array of user objects\n                data: taskDataPayload,\n                \n                // This tells DataTables how to handle the Bootstrap styling\n                responsive: true,\n                \n                // Replicates your \"{{^payload}}\" message\n                language: {\n                    emptyTable: \"Henüz Kullanıcı yok\"\n                },\n\n                // This is the most important part.\n                // We define each column and tell it what data to show.\n                columns: [\n                    // Column 1: User Name (with conditional styling)\n                    { \n                        data: 'username',\n                        title: 'User Name',\n                        render: function(data, type, row) {\n                            // This replicates: class=\"{{^isActive}}text-muted...\"\n                            if (row.isActive === false) {\n                                return `<span class=\"text-muted text-decoration-line-through\">${data}</span>`;\n                            }\n                            return data; // Just return the username string\n                        }\n                    },\n                    // Column 2: Date, Time (with custom HTML)\n                    { \n                        // This column is built from multiple fields, so we use 'date'\n                        // but the render function will use the 'row' object\n                        data: 'date',\n                        title: 'Date, Time',\n                        render: function(data, type, row) {\n                            // This replicates your <span class=\"badge...\">\n                            return `<span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> ${row.date},${row.time}</span>`;\n                        }\n                    },\n                    // Column 3: Role (simple text)\n                    { \n                        data: 'role',\n                        title: 'Role'\n                        // No render function needed, it just displays the text\n                    },\n                    // Column 4: Status (conditional text)\n                    { \n                        data: 'isActive',\n                        title: 'Status',\n                        render: function(data, type, row) {\n                            // This replicates: {{#isActive}}Active{{/isActive}}\n                            return data ? 'Active' : 'Inactive';\n                        }\n                    },\n                    // Column 5: Actions (custom button)\n                    { \n                        // This column isn't based on one data field, so we use null\n                        data: null,\n                        title: 'Actions',\n                        className: 'text-end', // Replicates align=\"right\"\n                        orderable: false,      // Don't let users sort by this column\n                        searchable: false,     // Don't include this column in search\n                        render: function(data, type, row) {\n                            // This rebuilds your button with the correct data attributes\n                            return `\n                                <button\n                                    class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                    data-user_id=\"${row.user_id}\"\n                                    data-isactive=\"${row.isActive}\">\n                                    <i class=\"bi bi-three-dots-vertical\"></i>\n                                </button>\n                            `;\n                        }\n                    }\n                ]\n            });\n        });\n    </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 1180,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "fc9a27b00c038025",
        "type": "inject",
        "z": "a03c0d2416f8ec45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "b641de611a59b43f",
        "type": "template",
        "z": "a03c0d2416f8ec45",
        "name": "User-Management Screen DTJS01",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User-List</title>\n    <!-- Jquery -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"\n        integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n    <!-- Using CDN for bootstrap for this example to work standalone -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/solid-dark.min.js\"></script>\n    <link href=\"https://cdn.datatables.net/2.0.8/css/dataTables.bootstrap5.min.css\" rel=\"stylesheet\">\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n    </style>\n    <script>\n        const taskDataPayload = JSON.parse('{{{payload_json}}}');\n        console.log(taskDataPayload)\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-6 offset-md-4 mt-1 mb-5\" style=\"max-width: 500px; text-align:center;\">\n                <div class=\"p-3 text-danger-emphasis bg-danger-subtle border border-danger-subtle rounded-3\" style=\"display:none;\"\n                    id=\"err_msg_container\"></div>\n            </div>\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <!-- action=\"/admin-ops/add-user\" -->\n                <form action=\"\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input type=\"text\" name=\"username\" class=\"form-control\" placeholder=\"user-name\" value=\"\" id=\"UsernameInput\" />\n                        <input type=\"text\" name=\"password\" class=\"form-control\" placeholder=\"password\" value=\"\" id=\"PasswordInput\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"button\" name=\"id\" value=\"\" onclick=\"addUser()\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <!-- \n                                This is the table \"shell\". \n                                We define the <thead> and <tfoot>. \n                                DataTables will build the <tbody> automatically.\n                            -->\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <!-- These headers must match your columns -->\n                                <th>User Name</th>\n                                <th>Date, Time</th>\n                                <th>Role</th>\n                                <th>Status</th>\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <!-- The <tbody> will be generated by DataTables -->\n                        <tbody>\n                        </tbody>\n                        <!-- Add a tfoot for the column filters -->\n                        <tfoot>\n                            <tr>\n                                <th>User Name</th>\n                                <th>Date, Time</th>\n                                <th>Role</th>\n                                <th>Status</th>\n                                <th style=\"text-align: right;\"></th>\n                            </tr>\n                        </tfoot>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Update</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n                    <div id=\"survey2Container\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n    <div class=\"postion-relative\">\n        <a href=\"/\"\n            class=\" btn btn-primary btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-card-checklist\"></i></a>\n    \n    </div>\n\n\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n\n                <input type=\"hidden\" name=\"user_id\" value=\"\" class=\"popover-id-input\" />\n                <div class=\"active-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/user-management/admin-ops/deactivate-user\" class=\"btn btn-outline-warning \" value=\"\" onclick=\"\" data-bs-placement=\"top\" data-bs-title=\"Deactivate User\" data-bs-toggle=\"tooltip\"><i class=\"bi bi-person-slash\"></i></button>\n                </div>\n                <div class=\"inactive-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/user-management/admin-ops/activate-user\" class=\"btn btn-outline-success\" value=\"\" onclick=\"\" data-bs-placement=\"top\" data-bs-title=\"Activate User\" data-bs-toggle=\"tooltip\"><i class=\"bi bi-person-check\"></i></button>\n                </div>\n                <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"user_id\" value=\"\" onclick=\"update_User(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                <button type=\"submit\" formaction=\"/user-management/admin-ops/delete-user\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete User\"><i class=\"bi bi-person-x\"></i></button>\n            </form> \n        </div>\n    </template>\n\n    <!-- DataTables JS -->\n    <script src=\"https://cdn.datatables.net/2.0.8/js/dataTables.min.js\"></script>\n    <!-- DataTables Bootstrap 5 JS -->\n    <script src=\"https://cdn.datatables.net/2.0.8/js/dataTables.bootstrap5.min.js\"></script>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n                // 1. Get the payload data from Node-RED\n                // We parse the JSON string that you passed in msg.payload\n                const taskDataPayload = JSON.parse('{{{payload_json}}}');\n    \n                // 2. Initialize DataTables\n                $('#task-table').DataTable({\n                    // This is your array of user objects\n                    data: taskDataPayload,\n                    \n                    // This tells DataTables how to handle the Bootstrap styling\n                    responsive: true,\n                    \n                    language: {\n                        emptyTable: \"Henüz Kullanıcı yok\"\n                    },\n    \n                    // This runs once the table is fully initialized\n                    initComplete: function () {\n                        this.api()\n                            .columns()\n                            .every(function () {\n                                let column = this;\n                                let title = $(column.header()).text();\n                                \n                                // Get the column's definition\n                                let colDef = this.settings()[0].aoColumns[this.index()];\n    \n                                // Only add search inputs for searchable columns\n                                if (colDef.bSearchable) {\n                                    let input = $('<input type=\"text\" class=\"form-control form-control-sm\" placeholder=\"Search ' + title + '\" />')\n                                        .appendTo($(column.footer()).empty())\n                                        .on('keyup change clear', function () {\n                                            // If the search value has changed, apply the filter\n                                            if (column.search() !== this.value) {\n                                                column.search(this.value).draw();\n                                            }\n                                        });\n                                    \n                                    // Stop click event on input from sorting the column\n                                    $(input).on('click', function(e) {\n                                        e.stopPropagation();\n                                    });\n                                } else {\n                                    // For non-searchable columns (like Actions), just empty the footer\n                                    $(column.footer()).empty();\n                                }\n                            });\n                    },\n    \n                    // This is the most important part.\n                    // We define each column and tell it what data to show.\n                    columns: [\n                        // Column 1: User Name (with conditional styling)\n                        { \n                            data: 'username',\n                            title: 'User Name',\n                            render: function(data, type, row) {\n                               \n                                if (row.isActive === false) {\n                                    return `<span class=\"text-muted text-decoration-line-through\">${data}</span>`;\n                                }\n                                return data; // Just return the username string\n                            }\n                        },\n                        // Column 2: Date, Time (with custom HTML)\n                        { \n                            // This column is built from multiple fields, so we use 'date'\n                            // but the render function will use the 'row' object\n                            data: 'date',\n                            title: 'Date, Time',\n                            render: function(data, type, row) {\n                                // This replicates your <span class=\"badge...\">\n                                return `<span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> ${row.date},${row.time}</span>`;\n                            }\n                        },\n                        // Column 3: Role (simple text)\n                        { \n                            data: 'role',\n                            title: 'Role'\n                            // No render function needed, it just displays the text\n                        },\n                        // Column 4: Status (conditional text)\n                        { \n                            data: 'isActive',\n                            title: 'Status',\n                            render: function(data, type, row) {\n                                return data ? 'Active' : 'Inactive';\n                            }\n                        },\n                        // Column 5: Actions (custom button)\n                        { \n                            // This column isn't based on one data field, so we use null\n                            data: null,\n                            title: 'Actions',\n                            className: 'text-end', // Replicates align=\"right\"\n                            orderable: false,      // Don't let users sort by this column\n                            searchable: false,     // Don't include this column in search\n                            render: function(data, type, row) {\n                                // This rebuilds your button with the correct data attributes\n                                return `\n                                    <button\n                                        class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                        data-user_id=\"${row.user_id}\"\n                                        data-isactive=\"${row.isActive}\">\n                                        <i class=\"bi bi-three-dots-vertical\"></i>\n                                    </button>\n                                `;\n                            }\n                        }\n                    ]\n                });\n            });\n    </script>\n\n    <!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element    \n\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n\n        \n        themeToggleButton.addEventListener('click', () => {\n\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n\n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n\n\n    <script>\n\n        document.addEventListener('DOMContentLoaded', () => {\n            \n            const popoverTemplate = document.getElementById('popover-template');\n\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n                const itemId = popoverTriggerEl.dataset.user_id;\n\n                const isActive = popoverTriggerEl.dataset.isactive === 'true';\n\n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    trigger: 'click manual',\n\n                    content: function () {\n\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n    \n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n\n\n                        if (isActive) {\n                            contentElement.querySelector('.inactive-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.active-buttons').remove();\n                        }\n\n                        return contentElement;\n                    }\n                });\n                \n\n                //  Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        function addUser(){\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Add User\";\n\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n \n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            \n            let u_name_input = document.getElementById(\"UsernameInput\").value\n            let password_input = document.getElementById(\"PasswordInput\").value\n\n            addUserModal.setValue('username',u_name_input);\n            addUserModal.setValue('password',password_input);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            addUserModal.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            addUserModal.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            addUserModal.render(document.getElementById(\"surveyContainer\"));\n            \n        };\n\n        async function sendAddedUser(sender){\n\n\n            const surveyData = sender.data;\n\n            \n            const url = '/user-management/admin-ops/add-user';\n            \n \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'fetchflag' : true,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(surveyData)\n                });\n                const response_data = await response.json();\n                if (response.ok) {\n                    console.log(\"User Added successfully!\");\n                    console.log(response);\n                    console.log(response.ok);\n                    location.reload();\n                } else {\n                    console.error(\"Failed to update task.\");\n                    $('#err_msg_container').text(response_data.error)\n                    $('#err_msg_container').css('display','inline')\n                }\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        }\n        \n        function update_User(num,obj){\n            const info = {\n                user_id : num\n            }\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Update\";\n            modalupdate.setAttribute('value', num);\n\n            // destroy popovers when modal is active\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n            // destroy tooltips when modal is active\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            \n            let object_in_q = taskDataPayload.find(user => user.user_id == num);\n            survey.setValue('user_id',num);\n            survey.setValue('username',object_in_q.username);\n            survey.setValue('password',object_in_q.password);\n            survey.setValue('role',object_in_q.role[0]);\n            survey.setValue('email',object_in_q.email);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            survey.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            survey.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            survey.render(document.getElementById(\"surveyContainer\"));\n            \n        };\n        \n        document.addEventListener('DOMContentLoaded', ()=>{\n            document.querySelector('.btn-close').addEventListener('click', ()=>{\n                close_user_update_window();\n            });\n            function close_user_update_window(){\n                survey.clear();\n                addUserModal.clear();\n            };\n        });\n\n        async function sendUserUpdate(sender){\n\n            const surveyData = sender.data;\n\n\n            const url = '/user-management/admin-ops/update-user';\n            \n            // Use fetch to send a POST request\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'fetchflag' : true,\n                'Content-Type': 'application/json'\n            },\n            // Convert the JavaScript object to a JSON string for the request body\n            body: JSON.stringify(surveyData)\n            });\n            const response_data = await response.json();\n            if (response.ok) {\n                console.log(\"User updated successfully!\");\n                console.log(response);\n                console.log(\"respones is ok : \", response.ok);\n                console.log(response_data)\n                location.reload();\n            } else {\n                console.error(\"Failed to update task.\");\n                console.log(response_data)\n                console.log(response_data.error)\n                $('#err_msg_container').text(response_data.error)\n                $('#err_msg_container').css('display','inline')\n            }\n\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        };\n\n    </script>\n    \n    <script>\n\n        const surveyJson = {\n            pages: [{\n                name: \"Update User\",\n                elements: [\n                    {\n                        name: \"user_id\", // The name to access the data\n                        type: \"text\", // Can be any input type\n                        inputType: \"numeric\",\n                        visible: false, // This is the key property to hide it,\n                        isRequired:true\n                    },{\n                        type: \"text\",\n                        name: \"username\",\n                        \"isRequired\": true,\n                        inputType: \"text\",\n                        title: \"Enter New Username:\",\n                    },\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        \"isRequired\": true,\n                        name: \"password\",\n                        title: \"Password\"\n                    },\n                    {\n                        \"type\": \"dropdown\",\n                        \"name\": \"role\",\n                        \"title\": \"Role\",\n                        \"isRequired\": true,\n                        \"showOtherItem\": false,\n                        \"choices\": [ \"Simiabraz\", \"Miamiasme\"]\n                    },\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        name: \"email\",\n                        title: \"E-mail\",\n                        validators: [\n                            { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                        ]\n                    }]\n            }]\n        };\n            \n        const survey = new Survey.Model(surveyJson);\n        survey.applyTheme(SurveyTheme.DefaultDark);\n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendUserUpdate);\n        \n    </script>\n    <script>\n\n        const addUserModalJson = {\n            pages: [{\n                name: \"PersonalDetails\",\n                elements: [\n                {\n                    type: \"text\",\n                    name: \"username\",\n                    \"isRequired\": true,\n                    inputType: \"text\",\n                    title: \"Enter New Username:\",\n                },\n                {\n                    type: \"text\",\n                    inputType: \"text\",\n                    \"isRequired\": true,\n                    name: \"password\",\n                    title: \"Password\"\n                },\n                {\n                    \"type\": \"dropdown\",\n                    \"name\": \"role\",\n                    \"title\": \"Role\",\n                    \"isRequired\": true,\n                    \"showOtherItem\": false,\n                    \"choices\": [ \"Simiabraz\", \"Miamiasme\"]\n                },\n                {\n                    type: \"text\",\n                    inputType: \"text\",\n                    name: \"email\",\n                    title: \"E-mail\",\n                    validators: [\n                        { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                    ]\n                }]\n            }]\n        };\n            \n        const addUserModal = new Survey.Model(addUserModalJson);\n        addUserModal.applyTheme(SurveyTheme.DefaultDark);\n        addUserModal.focusFirstQuestionAutomatic = false;\n        addUserModal.clearInvisibleValues = \"none\";\n        addUserModal.onComplete.add(sendAddedUser);\n        \n    </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 722,
        "y": 1306,
        "wires": [
            []
        ]
    },
    {
        "id": "10021174c6ee8075",
        "type": "template",
        "z": "a03c0d2416f8ec45",
        "name": "User-Management Screen",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User-List</title>\n    <!-- Jquery -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"\n        integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n    <!-- Using CDN for bootstrap for this example to work standalone -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/solid-dark.min.js\"></script>\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n    </style>\n    <script>\n        const taskDataPayload = JSON.parse('{{{payload_json}}}');\n        console.log(taskDataPayload)\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-6 offset-md-4 mt-1 mb-5\" style=\"max-width: 500px; text-align:center;\">\n                <div class=\"p-3 text-danger-emphasis bg-danger-subtle border border-danger-subtle rounded-3\" style=\"display:none;\"\n                    id=\"err_msg_container\"></div>\n            </div>\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <!-- action=\"/admin-ops/add-user\" -->\n                <form action=\"\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input type=\"text\" name=\"username\" class=\"form-control\" placeholder=\"user-name\" value=\"\" id=\"UsernameInput\" />\n                        <input type=\"text\" name=\"password\" class=\"form-control\" placeholder=\"password\" value=\"\" id=\"PasswordInput\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"button\" name=\"id\" value=\"\" onclick=\"addUser()\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <th>User Name</th>\n                                <th>Date, Time</th>\n                                <th>Role</th>\n                                <th>Status</th>\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                            {{#payload}}\n                            <tr>\n                                <td class=\"{{^isActive}}text-muted text-decoration-line-through{{/isActive}}\">{{username}}</td>\n                                <td><span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> {{date}},{{time}}</span>\n                                </td>\n                                <td class=\"\">{{role}}</td>\n                                <td class=\"\">{{#isActive}}Active{{/isActive}}{{^isActive}}Inactive{{/isActive}}</td>\n                                <td align=\"right\">\n          \n                                    <button\n                                            class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                            data-user_id=\"{{user_id}}\"\n                                            data-isactive =\"{{isActive}}\">\n                                            <i class=\"bi bi-three-dots-vertical\"></i>\n                                        </button>\n                                </td>\n                            </tr>\n                            {{/payload}}\n                            {{^payload}}\n                            <tr>\n                                <td class=\"text-muted\" colspan=\"3\">Henüz Kullanıcı yok</td>\n                            </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Update</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n                    <div id=\"survey2Container\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n    <div class=\"postion-relative\">\n        <a href=\"/\"\n            class=\" btn btn-primary btn-lg position-fixed bottom-0 end-0 m-5 shadow\"><i class=\"bi bi-card-checklist\"></i></a>\n    \n    </div>\n\n\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n\n                <input type=\"hidden\" name=\"user_id\" value=\"\" class=\"popover-id-input\" />\n                <div class=\"active-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/user-management/admin-ops/deactivate-user\" class=\"btn btn-outline-warning \" value=\"\" onclick=\"\" data-bs-placement=\"top\" data-bs-title=\"Deactivate User\" data-bs-toggle=\"tooltip\"><i class=\"bi bi-person-slash\"></i></button>\n                </div>\n                <div class=\"inactive-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/user-management/admin-ops/activate-user\" class=\"btn btn-outline-success\" value=\"\" onclick=\"\" data-bs-placement=\"top\" data-bs-title=\"Activate User\" data-bs-toggle=\"tooltip\"><i class=\"bi bi-person-check\"></i></button>\n                </div>\n                <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"user_id\" value=\"\" onclick=\"update_User(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                <button type=\"submit\" formaction=\"/user-management/admin-ops/delete-user\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete User\"><i class=\"bi bi-person-x\"></i></button>\n            </form> \n        </div>\n    </template>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n    <!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element    \n\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n\n        \n        themeToggleButton.addEventListener('click', () => {\n\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n\n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n\n\n    <script>\n\n        document.addEventListener('DOMContentLoaded', () => {\n            \n            const popoverTemplate = document.getElementById('popover-template');\n\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n                const itemId = popoverTriggerEl.dataset.user_id;\n\n                const isActive = popoverTriggerEl.dataset.isactive === 'true';\n\n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    trigger: 'click manual',\n\n                    content: function () {\n\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n    \n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n\n\n                        if (isActive) {\n                            contentElement.querySelector('.inactive-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.active-buttons').remove();\n                        }\n\n                        return contentElement;\n                    }\n                });\n                \n\n                //  Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        function addUser(){\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Add User\";\n\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n \n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            \n            let u_name_input = document.getElementById(\"UsernameInput\").value\n            let password_input = document.getElementById(\"PasswordInput\").value\n\n            addUserModal.setValue('username',u_name_input);\n            addUserModal.setValue('password',password_input);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            addUserModal.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            addUserModal.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            addUserModal.render(document.getElementById(\"surveyContainer\"));\n            \n        };\n\n        async function sendAddedUser(sender){\n\n\n            const surveyData = sender.data;\n\n            \n            const url = '/user-management/admin-ops/add-user';\n            \n \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'fetchflag' : true,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(surveyData)\n                });\n                const response_data = await response.json();\n                if (response.ok) {\n                    console.log(\"User Added successfully!\");\n                    console.log(response);\n                    console.log(response.ok);\n                    location.reload();\n                } else {\n                    console.error(\"Failed to update task.\");\n                    $('#err_msg_container').text(response_data.error)\n                    $('#err_msg_container').css('display','inline')\n                }\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        }\n        \n        function update_User(num,obj){\n            const info = {\n                user_id : num\n            }\n            const modalupdate = document.getElementById('staticBackdrop');\n            const modal_title = document.querySelector('.modal-title');\n            modal_title.innerText=\"Update\";\n            modalupdate.setAttribute('value', num);\n\n            // destroy popovers when modal is active\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n            // destroy tooltips when modal is active\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            \n            let object_in_q = taskDataPayload.find(user => user.user_id == num);\n            survey.setValue('user_id',num);\n            survey.setValue('username',object_in_q.username);\n            survey.setValue('password',object_in_q.password);\n            survey.setValue('role',object_in_q.role[0]);\n            survey.setValue('email',object_in_q.email);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            survey.applyTheme(SurveyTheme.SolidDark);\n            }else {\n            survey.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            survey.render(document.getElementById(\"surveyContainer\"));\n            \n        };\n        \n        document.addEventListener('DOMContentLoaded', ()=>{\n            document.querySelector('.btn-close').addEventListener('click', ()=>{\n                close_user_update_window();\n            });\n            function close_user_update_window(){\n                survey.clear();\n                addUserModal.clear();\n            };\n        });\n\n        async function sendUserUpdate(sender){\n\n            const surveyData = sender.data;\n\n\n            const url = '/user-management/admin-ops/update-user';\n            \n            // Use fetch to send a POST request\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'fetchflag' : true,\n                'Content-Type': 'application/json'\n            },\n            // Convert the JavaScript object to a JSON string for the request body\n            body: JSON.stringify(surveyData)\n            });\n            const response_data = await response.json();\n            if (response.ok) {\n                console.log(\"User updated successfully!\");\n                console.log(response);\n                console.log(\"respones is ok : \", response.ok);\n                console.log(response_data)\n                location.reload();\n            } else {\n                console.error(\"Failed to update task.\");\n                console.log(response_data)\n                console.log(response_data.error)\n                $('#err_msg_container').text(response_data.error)\n                $('#err_msg_container').css('display','inline')\n            }\n\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        };\n\n    </script>\n    \n    <script>\n\n        const surveyJson = {\n            pages: [{\n                name: \"Update User\",\n                elements: [\n                    {\n                        name: \"user_id\", // The name to access the data\n                        type: \"text\", // Can be any input type\n                        inputType: \"numeric\",\n                        visible: false, // This is the key property to hide it,\n                        isRequired:true\n                    },{\n                        type: \"text\",\n                        name: \"username\",\n                        \"isRequired\": true,\n                        inputType: \"text\",\n                        title: \"Enter New Username:\",\n                    },\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        \"isRequired\": true,\n                        name: \"password\",\n                        title: \"Password\"\n                    },\n                    {\n                        \"type\": \"dropdown\",\n                        \"name\": \"role\",\n                        \"title\": \"Role\",\n                        \"isRequired\": true,\n                        \"showOtherItem\": false,\n                        \"choices\": [ \"Simiabraz\", \"Miamiasme\"]\n                    },\n                    {\n                        type: \"text\",\n                        inputType: \"text\",\n                        name: \"email\",\n                        title: \"E-mail\",\n                        validators: [\n                            { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                        ]\n                    }]\n            }]\n        };\n            \n        const survey = new Survey.Model(surveyJson);\n        survey.applyTheme(SurveyTheme.DefaultDark);\n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendUserUpdate);\n        \n    </script>\n    <script>\n\n        const addUserModalJson = {\n            pages: [{\n                name: \"PersonalDetails\",\n                elements: [\n                {\n                    type: \"text\",\n                    name: \"username\",\n                    \"isRequired\": true,\n                    inputType: \"text\",\n                    title: \"Enter New Username:\",\n                },\n                {\n                    type: \"text\",\n                    inputType: \"text\",\n                    \"isRequired\": true,\n                    name: \"password\",\n                    title: \"Password\"\n                },\n                {\n                    \"type\": \"dropdown\",\n                    \"name\": \"role\",\n                    \"title\": \"Role\",\n                    \"isRequired\": true,\n                    \"showOtherItem\": false,\n                    \"choices\": [ \"Simiabraz\", \"Miamiasme\"]\n                },\n                {\n                    type: \"text\",\n                    inputType: \"text\",\n                    name: \"email\",\n                    title: \"E-mail\",\n                    validators: [\n                        { \"type\": \"email\", \"text\": \"Please enter a valid e-mail.\" }\n                    ]\n                }]\n            }]\n        };\n            \n        const addUserModal = new Survey.Model(addUserModalJson);\n        addUserModal.applyTheme(SurveyTheme.DefaultDark);\n        addUserModal.focusFirstQuestionAutomatic = false;\n        addUserModal.clearInvisibleValues = \"none\";\n        addUserModal.onComplete.add(sendAddedUser);\n        \n    </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 980,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "bd7e8ca9590ad55e",
        "type": "template",
        "z": "16b5753bd4d1f0a0",
        "name": "test",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"https://unpkg.com/mustache@latest\"></script>\n    <title>Mustache Test</title>\n</head>\n<body>\n    \n    <h2>My Tasks</h2>\n\n    <table>\n        <tbody id=\"task-list-container\">\n            </tbody>\n    </table>\n\n    <script id=\"task-template\" type=\"text/template\">\n        {{#payload}}\n            <tr>\n                <td>{{name}}</td>\n                <td>{{#done}}Completed{{/done}}{{^done}}Pending{{/done}}</td>\n                <td>\n                    </td>\n            </tr>\n        {{/payload}}\n        {{^payload}}\n            <tr>\n                <td colspan=\"3\">Henüz Task yok</td>\n            </tr>\n        {{/payload}}\n    </script>\n\n\n    <script>\n        // The data you want to display\n        const taskData = {\n            \"payload\": [\n                { \"name\": \"Finish the report\", \"done\": true },\n                { \"name\": \"Call the client\", \"done\": false }\n            ]\n        };\n\n        // Find the template's HTML\n        const template = document.getElementById('task-template').innerHTML;\n\n        // Find the destination container\n        const destination = document.getElementById('task-list-container');\n        \n        // Render the template with the data\n        const renderedHTML = Mustache.render(template, taskData);\n        \n        // Put the rendered HTML onto the page\n        destination.innerHTML = renderedHTML;\n    </script>\n\n</body>\n</html>",
        "output": "str",
        "x": 310,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c8c7e5b119e67cee",
        "type": "http in",
        "z": "16b5753bd4d1f0a0",
        "name": "",
        "url": "/test",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "bd7e8ca9590ad55e"
            ]
        ]
    },
    {
        "id": "445340151fa266ce",
        "type": "template",
        "z": "16b5753bd4d1f0a0",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"./img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n    <style>\n        #inputGroup-sizing-lg:hover {\n            background-color: burlywood;\n            transition: box-shadow 0.3s ease;\n            cursor: pointer;\n            box-shadow: 4px 4px 12px rgba(0, 0, 0, 0.4);\n        }\n\n        ;\n\n        .btn.btn-primary:focus {\n            transition: box-shadow 0.3s ease;\n            border-color: #86b7fe;\n            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n            border-radius: 3px;\n        }\n    </style>\n    <script>\n        function createTask(params) {\n            \n        }\n        function handleCheck(chkbx, lbl) {\n            const temp_chkbx = document.getElementById(chkbx);\n            if (temp_chkbx.checked) {\n                lbl.textContent = \"☑\";\n            }\n            else{\n                lbl.textContent = \"☐\";\n            }\n        }\n    </script>\n</head>\n\n<body>\n    <nav class=\"navbar navbar-expand-lg bg-body-tertiary\">\n        <div class=\"container-fluid\">\n            <a class=\"navbar-brand\" href=\"#\">Navbar</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#\">Link</a>\n                    </li>\n                    <li class=\"nav-item dropdown\">\n                        <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\"\n                            aria-expanded=\"false\">\n                            Dropdown\n                        </a>\n                        <ul class=\"dropdown-menu\">\n                            <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>\n                            <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>\n                            <li>\n                                <hr class=\"dropdown-divider\">\n                            </li>\n                            <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>\n                        </ul>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link disabled\" aria-disabled=\"true\">Disabled</a>\n                    </li>\n                </ul>\n                <form class=\"d-flex\" role=\"search\">\n                    <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n                    <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\n                </form>\n            </div>\n        </div>\n    </nav>\n\n    <!-- NAVBAREND -->\n\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                <form action=\"\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Big Man Charizard\"/>\n                        <button class=\"btn btn-primary\" type=\"reset\" style=\"padding-left: 10px; padding-right: 10px; background-color: white;color: black;\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\" style=\"padding-left: 30px; padding-right: 30px;\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border\">\n                    <table class=\"table table-striped table-hover border mb-0 \">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details... Details</th>\n                                <th style=\"text-align: center;\">Actions</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {{#payload}}\n                            <tr>\n                                <td>example task1</td>\n                                <td>date, due date, etc.</td>\n                                <td align=\"right\">\n                                    <div class=\"btn-group text-right\">\n                                        <button class=\"btn btn-outline-primary\">Update</button>\n                                        <button class=\"btn btn-outline-secondary\">Reminder</button>\n                                        <button class=\"btn btn-outline-warning\">Delete</button>\n                                        <button class=\"btn btn-outline-dark\">Delay</button>\n                                    </div>\n                                </td>\n                                <td>\n                                    <input type=\"checkbox\"/>\n                                </td>\n                            </tr>\n                            {{/payload}}\n                            <tr>\n                                <td>example task2</td>\n                                <td>date, due date, etc.</td>\n                                <td align=\"right\">\n                                    <div class=\"btn-group text-right\">\n                                        <button class=\"btn btn-outline-primary\">Update</button>\n                                        <button class=\"btn btn-outline-secondary\">Reminder</button>\n                                        <button class=\"btn btn-outline-warning\">Delete</button>\n                                        <button class=\"btn btn-outline-dark\">Delay</button>\n                                    </div>\n                                </td>\n                                <td>\n                                    <input type=\"checkbox\"/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>example task3</td>\n                                <td>date, due date, etc.</td>\n                                <td align=\"right\">\n                                    <div class=\"btn-group text-right\">\n                                        <button class=\"btn btn-outline-primary\">Update</button>\n                                        <button class=\"btn btn-outline-secondary\">Reminder</button>\n                                        <button class=\"btn btn-outline-warning\">Delete</button>\n                                        <button class=\"btn btn-outline-dark\">Delay</button>\n                                    </div>\n                                </td>\n                                <td>\n                                    <input type=\"checkbox\" class=\"btn-check\" id=\"btncheck1\" onchange=\"handleCheck(this, label1)\"/>\n                                    <label for=\"btncheck1\" class=\"btn btn-outline-primary border-0\" id=\"label1\" onchange=\"handleCheck(this, label1)\">☐</label>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td><a href=\"admin_panel.html\">example task4</a></td>\n                                <td>date, due date, etc.</td>\n                                <td align=\"right\">\n                                    <div class=\"btn-group text-right\">\n                                        <button class=\"btn btn-outline-primary\">Update</button>\n                                        <button class=\"btn btn-outline-secondary\">Reminder</button>\n                                        <button class=\"btn btn-outline-warning\">Delete</button>\n                                        <button class=\"btn btn-outline-dark\">Delay</button>\n                                    </div>\n                                </td>\n                                <td>\n                                    <input type=\"checkbox\" class=\"btn-check\" id=\"btncheck1\" onchange=\"handleCheck(this, label1)\"/>\n                                    <label for=\"btncheck1\" class=\"btn btn-outline-primary border-0\" id=\"label1\" onchange=\"handleCheck(this, label1)\">☐</label>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script>\n        src=\"/js/bootsrap.bundle.min.js\"\n    </script>\n    <!--<p>Big Man Blastoise</p>-->\n</body>\n\n</html>\n\n<!--\nButton 110 {\n\twidth: 83px;\n\theight: 38px;\n\tpadding: 0px 10px;\n\tbackground: #0178FD;\n\tborder: 1px solid #0178FD;\n\tborder-radius: 4px;\n\tcolor: #FFFFFF;\n\tfont-family: \"Helvetica\";\n\tfont-weight: 400;\n\tfont-size: 16px;\n\ttext-align: center;\n}\n-->",
        "output": "str",
        "x": 300,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "93db7d1859b03c3a",
        "type": "http in",
        "z": "16b5753bd4d1f0a0",
        "name": "deleteTaskSpared",
        "url": "/deleteTaskSpared",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "a61abee011337f3a",
                "a455b04a5ddf65c9"
            ]
        ]
    },
    {
        "id": "a61abee011337f3a",
        "type": "debug",
        "z": "16b5753bd4d1f0a0",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 260,
        "wires": []
    },
    {
        "id": "62183629e92c7b77",
        "type": "function",
        "z": "16b5753bd4d1f0a0",
        "name": "db.todo.delete()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst index = todo.findIndex(x => x.id == msg.payload.id)\n\nif(!~index){\n    msg.message=\"No matching task found with the ID.\";\n    return [null,msg]\n}\n\ntodo.splice(index,1)\n\nDB.todo = todo\n\nglobal.set(\"DB\",DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "9f073915715f8a56"
            ],
            [
                "120bde15a98516bb",
                "705e18b530138bb5"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "9f073915715f8a56",
        "type": "http response",
        "z": "16b5753bd4d1f0a0",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 640,
        "y": 280,
        "wires": []
    },
    {
        "id": "a455b04a5ddf65c9",
        "type": "function",
        "z": "16b5753bd4d1f0a0",
        "name": "validation",
        "func": "if(!msg.payload.id){\n    msg.message = \"The task you wanted to delete must have an ID.\";\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 300,
        "wires": [
            [
                "62183629e92c7b77"
            ],
            [
                "b4551f1736463831",
                "32437af3f1405c0d"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "6d20336a458d780c",
        "type": "comment",
        "z": "16b5753bd4d1f0a0",
        "name": "Spared",
        "info": "",
        "x": 150,
        "y": 200,
        "wires": []
    },
    {
        "id": "120bde15a98516bb",
        "type": "link out",
        "z": "16b5753bd4d1f0a0",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "312f051dcff7e6b6",
            "937d32fbb3959037"
        ],
        "x": 595,
        "y": 340,
        "wires": []
    },
    {
        "id": "b4551f1736463831",
        "type": "link out",
        "z": "16b5753bd4d1f0a0",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "312f051dcff7e6b6",
            "937d32fbb3959037"
        ],
        "x": 385,
        "y": 340,
        "wires": []
    },
    {
        "id": "32437af3f1405c0d",
        "type": "debug",
        "z": "16b5753bd4d1f0a0",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 380,
        "wires": []
    },
    {
        "id": "705e18b530138bb5",
        "type": "debug",
        "z": "16b5753bd4d1f0a0",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 380,
        "wires": []
    },
    {
        "id": "5c554c21ea0acfb3",
        "type": "template",
        "z": "16b5753bd4d1f0a0",
        "name": "LastWorking",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"./img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/fonts/bootstrap-icons.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n    <!-- <script src=\"https://unpkg.com/mustache@latest\"></script> -->\n    <script src=\"/js/mustache.min.js\"></script>\n    <style>\n        #inputGroup-sizing-lg:hover {\n            background-color: burlywood;\n            transition: box-shadow 0.3s ease;\n            cursor: pointer;\n            box-shadow: 4px 4px 12px rgba(0, 0, 0, 0.4);\n        }\n\n        ;\n\n        .btn.btn-primary:focus {\n            transition: box-shadow 0.3s ease;\n            border-color: #86b7fe;\n            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n            border-radius: 3px;\n        }\n    </style>\n    <script>\n        function createTask(params) {\n            \n        }\n        function handleCheck(chkbx, lbl) {\n            const temp_chkbx = document.getElementById(chkbx);\n            if (temp_chkbx.checked) {\n                lbl.textContent = \"☑\";\n            }\n            else{\n                lbl.textContent = \"☐\";\n            }\n        }\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <!-- {{#message}}<p class=\"text text-danger\">{{.}}</p>{{/message}} -->\n                <form action=\"/operation/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control {{#error}} border-danger {{/error}}\" placeholder=\"Big Man Charizard\"/>\n                        <button class=\"btn btn-primary\" type=\"reset\" style=\"padding-left: 10px; padding-right: 10px; background-color: white;color: black;\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\" style=\"padding-left: 30px; padding-right: 30px;\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border\">\n                    <table class=\"table table-striped table-hover border mb-0 \">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details... Details</th>\n                                <th style=\"text-align: center;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {{#payload}}\n                                <tr>\n                                    <td class=\"{{#done}}text-decoration-line-through{{/done}}\">{{name}}</td>\n                                    <td><span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> {{date}},{{time}}</span></td>\n                                    <td align=\"right\">\n                                        \n                                        <div class=\"btn-group text-right\">\n                                            <form method=\"POST\">\n                                                <input type=\"hidden\" name=\"id\" value=\"{{id}}\"  />\n                                            {{#done}}\n                                                <button data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Mark As Incomplete\" type=\"submit\" formaction=\"/operation/incomplete\" class=\"btn btn-outline-warning\"><i class=\"bi bi-x-square\"></i></button>\n                                            {{/done}}\n                                            {{^done}}\n                                                <button data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Update\" formaction=\"/comingsoon\" onclick=\"alert('coming soon')\" class=\"btn btn-outline-primary\"><i class=\"bi bi-pencil\"></i></button>\n                                                <button data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Set Reminder\" formaction=\"/comingsoon\" onclick=\"alert('coming soon')\" class=\"btn btn-outline-secondary\"><i class=\"bi bi-bell\"></i></button>\n                                                <button data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delay\" formaction=\"/comingsoon\" onclick=\"alert('coming soon')\" class=\"btn btn-outline-info\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                                                <button data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Complete Task\" type=\"submit\" formaction=\"/operation/complete\" class=\"btn btn-outline-success\"><i class=\"bi bi-check2-square\"></i></button>\n                                            {{/done}}\n                                            <button class=\"btn btn-custom\" button type=\"button\" id=\"options-popover-btn\"><i class=\"bi bi-three-dots-vertical\"></i></div>\n                                            <button data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Task\" type=\"submit\" formaction=\"/operation/deleteTask\" class=\"btn btn-outline-danger\"><i class=\"bi bi-trash3\"></i></button>\n                                            </form>\n                                        </div>\n                                    </td>\n                                </tr>\n                            {{/payload}}\n                            {{^payload}}\n                                <tr>\n                                    <td class=\"text-muted\" colspan=\"3\">Henüz Task yok</td>\n                                </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n                <p class=\"fst-italic fs-4\">Mükemmeli yakalamaya çalışırken iyiden olmayalım. Bu sözü belki de ben uydurdum. <br>  -Levent Sencer Şahin</p>\n                <p id=\"thisone\"></p>\n                \n            </div>\n        </div>\n    </div>\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))    \n    </script>\n    \n    <script>\n        let deneme = document.getElementById(\"thisone\");\n        let yeniden = new Date();\n        deneme.innerHTML = yeniden.toLocaleDateString()+ \"<br>\" + \"<span id='clock'></span>\";\n        const clock = document.getElementById(\"clock\");\n        const interval = setInterval(function(){\n            const now = new Date();\n        clock.innerHTML = now.toLocaleTimeString();\n        },100);\n\n\n    </script>\n    <script>\n        //Script for advanced popover menu\n            const optionsBtn = document.getElementById('options-popover-btn');\n    \n            const popoverContent = `\n            \n            <div class=\"btn-group text-right\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{id}}\"  />\n                {{#done}}\n                    <button data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-title=\"Mark As Incomplete\" type=\"submit\" formaction=\"/operation/incomplete\" class=\"btn btn-outline-warning\"><i class=\"bi bi-x-square\"></i></button>\n                {{/done}}\n                {{^done}}\n                    <button data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-title=\"Update\" formaction=\"/comingsoon\" onclick=\"alert('coming soon')\" class=\"btn btn-outline-primary\"><i class=\"bi bi-pencil\"></i></button>\n                    <button data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-title=\"Set Reminder\" formaction=\"/comingsoon\" onclick=\"alert('coming soon')\" class=\"btn btn-outline-secondary\"><i class=\"bi bi-bell\"></i></button>\n                    <button data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-title=\"Delay\" formaction=\"/comingsoon\" onclick=\"alert('coming soon')\" class=\"btn btn-outline-info\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                    <button data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-title=\"Complete Task\" type=\"submit\" formaction=\"/operation/complete\" class=\"btn btn-outline-success\"><i class=\"bi bi-check2-square\"></i></button>\n                {{/done}}\n                    <button data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-title=\"Delete Task\" type=\"submit\" formaction=\"/operation/deleteTask\" class=\"btn btn-outline-danger\"><i class=\"bi bi-trash3\"></i></button>\n            </div>\n            \n            `;\n    \n            const popover = new bootstrap.Popover(optionsBtn, {\n            html: true, // Required to allow HTML in the content\n            title: 'Options',\n            content: popoverContent,\n            sanitize: false, // Required to allow buttons and other complex HTML\n            });\n            optionsBtn.addEventListener('shown.bs.popover', () => {\n            console.log('Popover shown, initializing nested tooltips...');\n            \n            // Find the popover body that was just created by Bootstrap\n            const popoverBody = document.querySelector('.popover-body');\n            \n            if (popoverBody) {\n            // Find all tooltip triggers *inside* that new popover body\n            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            \n            // Initialize a new Bootstrap Tooltip for each one\n            [...tooltipTriggersInPopover].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n            \n            console.log(`Initialized ${tooltipTriggersInPopover.length} nested tooltips.`);\n            }\n            });\n    \n    </script>\n</body>\n\n</html>\n\n<!--\nButton 110 {\n\twidth: 83px;\n\theight: 38px;\n\tpadding: 0px 10px;\n\tbackground: #0178FD;\n\tborder: 1px solid #0178FD;\n\tborder-radius: 4px;\n\tcolor: #FFFFFF;\n\tfont-family: \"Helvetica\";\n\tfont-weight: 400;\n\tfont-size: 16px;\n\ttext-align: center;\n}\n-->",
        "output": "str",
        "x": 210,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "8d894d13d7c5ebd4",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "url": "/asdf",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "38dcc34721c5c362"
            ]
        ]
    },
    {
        "id": "2e31385083da7cc0",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "e8b6c2c1f7873174",
        "type": "template",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"./img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n    <!-- <script src=\"https://unpkg.com/mustache@latest\"></script> -->\n    <script src=\"./js/mustache.min.js\"></script>\n    <style>\n        #inputGroup-sizing-lg:hover {\n            background-color: burlywood;\n            transition: box-shadow 0.3s ease;\n            cursor: pointer;\n            box-shadow: 4px 4px 12px rgba(0, 0, 0, 0.4);\n        }\n\n        ;\n\n        .btn.btn-primary:focus {\n            transition: box-shadow 0.3s ease;\n            border-color: #86b7fe;\n            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n            border-radius: 3px;\n        }\n    </style>\n    <script>\n        function createTask(params) {\n            \n        }\n        function handleCheck(chkbx, lbl) {\n            const temp_chkbx = document.getElementById(chkbx);\n            if (temp_chkbx.checked) {\n                lbl.textContent = \"☑\";\n            }\n            else{\n                lbl.textContent = \"☐\";\n            }\n        }\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <!-- {{#message}}<p class=\"text text-danger\">{{.}}</p>{{/message}} -->\n                <form action=\"/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control {{#error}} border-danger {{/error}}\" placeholder=\"Big Man Charizard\"/>\n                        <button class=\"btn btn-primary\" type=\"reset\" style=\"padding-left: 10px; padding-right: 10px; background-color: white;color: black;\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\" style=\"padding-left: 30px; padding-right: 30px;\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border\">\n                    <table class=\"table table-striped table-hover border mb-0 \">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details... Details</th>\n                                <th style=\"text-align: center;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {{#payload}}\n                                <tr>\n                                    <td>{{name}}</td>\n                                    <td>date, due date, etc.</td>\n                                    <td align=\"right\">\n                                        \n                                        <div class=\"btn-group text-right\">\n                                            <form method=\"POST\">\n                                                <input type=\"hidden\" name=\"id\" value=\"{{id}}\"  />\n                                            {{#done}}\n                                                <button type=\"submit\" class=\"btn btn-outline-dark\">Mark as incomplete</button>\n                                            {{/done}}\n                                            {{^done}}\n                                                <button type=\"submit\" class=\"btn btn-outline-primary\">Update</button>\n                                                <button type=\"submit\" class=\"btn btn-outline-secondary\">Reminder</button>\n                                                <button type=\"submit\" class=\"btn btn-outline-dark\">Delay</button>\n                                                <button type=\"submit\" class=\"btn btn-outline-dark\">complete</button>\n                                            {{/done}}\n                                            <button type=\"submit\" formaction=\"/deleteTask\" class=\"btn btn-outline-warning\">Delete</button>\n                                            </form>\n                                        </div>\n                                    </td>\n                                </tr>\n                            {{/payload}}\n                            {{^payload}}\n                                <tr>\n                                    <td class=\"text-muted\" colspan=\"3\">Henüz Task yok</td>\n                                </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script>\n        src=\"/js/bootsrap.bundle.min.js\"\n    </script>\n    <!--<p>Big Man Blastoise</p>-->\n</body>\n\n</html>\n\n<!--\nButton 110 {\n\twidth: 83px;\n\theight: 38px;\n\tpadding: 0px 10px;\n\tbackground: #0178FD;\n\tborder: 1px solid #0178FD;\n\tborder-radius: 4px;\n\tcolor: #FFFFFF;\n\tfont-family: \"Helvetica\";\n\tfont-weight: 400;\n\tfont-size: 16px;\n\ttext-align: center;\n}\n-->",
        "output": "str",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "2e31385083da7cc0"
            ]
        ]
    },
    {
        "id": "8f53a825dc696a75",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "DB",
        "func": "// Flush DB\nglobal.set(\"DB\",{\n    todo:[]\n})",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst DB = global.get(\"DB\") || {\n    todo: [] //todo: bir koleksiyona denk gelir []: veriye denk gelir.\n}\nglobal.set(\"DB\", DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 20,
        "wires": []
    },
    {
        "id": "fd56805b5adeaf85",
        "type": "inject",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 20,
        "wires": [
            [
                "8f53a825dc696a75"
            ]
        ]
    },
    {
        "id": "38dcc34721c5c362",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.find()",
        "func": "const DB = global.get(\"DB\")\nmsg.payload = DB.todo;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "e8b6c2c1f7873174"
            ]
        ]
    },
    {
        "id": "d9956ae6e8586b64",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "addTask",
        "url": "/addasdf",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "629e01dc6f48e2fc",
                "e50d4dcdf5066774"
            ]
        ]
    },
    {
        "id": "988e2b681430bcd4",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "8d1ac08a97400b5b",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.insert()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst now = new Date().getTime();\ntodo.push({\n    id: now,\n    name:msg.payload.name,\n    done:false,\n    stamp:{\n        CreatedAt:now,\n        ip:msg.req.ip,\n        user:\"\",\n        email:\"\",\n    }\n})\nDB.todo = todo\nglobal.set(\"DB\",DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 200,
        "wires": [
            [
                "988e2b681430bcd4"
            ]
        ]
    },
    {
        "id": "629e01dc6f48e2fc",
        "type": "debug",
        "z": "8cb1c5cd55e7b8a6",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 160,
        "wires": []
    },
    {
        "id": "e50d4dcdf5066774",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "validation",
        "func": "if(!msg.payload.name){\n    node.error(\"You cannot add a nameless task.\", msg);\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "8d1ac08a97400b5b"
            ]
        ]
    },
    {
        "id": "87e4c093af5a4602",
        "type": "catch",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "scope": [
            "e50d4dcdf5066774"
        ],
        "uncaught": false,
        "x": 270,
        "y": 260,
        "wires": [
            [
                "8d9cc194761fc46c",
                "2753f738ee39cd73"
            ]
        ]
    },
    {
        "id": "312f051dcff7e6b6",
        "type": "link in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link in 2",
        "links": [
            "8d9cc194761fc46c",
            "a12b6d60aee2364a",
            "10565997cee40a35",
            "120bde15a98516bb",
            "b4551f1736463831"
        ],
        "x": 185,
        "y": 60,
        "wires": [
            [
                "38dcc34721c5c362",
                "93e429c8a65c519d"
            ]
        ]
    },
    {
        "id": "8d9cc194761fc46c",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "312f051dcff7e6b6"
        ],
        "x": 425,
        "y": 260,
        "wires": []
    },
    {
        "id": "2753f738ee39cd73",
        "type": "debug",
        "z": "8cb1c5cd55e7b8a6",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 320,
        "wires": []
    },
    {
        "id": "2b5268c06721626a",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "deleteTask",
        "url": "/deleteTaskasddf",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 420,
        "wires": [
            [
                "aea7e35cce21a0b1",
                "a3fcaea6b671b753"
            ]
        ]
    },
    {
        "id": "aea7e35cce21a0b1",
        "type": "debug",
        "z": "8cb1c5cd55e7b8a6",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 380,
        "wires": []
    },
    {
        "id": "acdae8bb69560a46",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.delete()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst index = todo.findIndex(x => x.id == msg.payload.id)\n\nif(!~index){\n    msg.error={\n        message:\"No matching task found with the ID.\"\n    }\n    return [null,msg]\n}\n\ntodo.splice(index,1)\n\nDB.todo = todo\n\nglobal.set(\"DB\",DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 400,
        "wires": [
            [
                "ed47938e691accce"
            ],
            [
                "a12b6d60aee2364a",
                "1f1d86131f830615"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "ed47938e691accce",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 640,
        "y": 400,
        "wires": []
    },
    {
        "id": "a3fcaea6b671b753",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "validation",
        "func": "if(!msg.payload.id){\n    msg.error = {\n        message:\"The task you wanted to delete must have an ID.\"\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 420,
        "wires": [
            [
                "acdae8bb69560a46"
            ],
            [
                "10565997cee40a35",
                "a359aebc43dc478b"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "49cf0a7315e3121f",
        "type": "comment",
        "z": "8cb1c5cd55e7b8a6",
        "name": "Spared",
        "info": "",
        "x": 90,
        "y": 500,
        "wires": []
    },
    {
        "id": "a12b6d60aee2364a",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "312f051dcff7e6b6"
        ],
        "x": 595,
        "y": 460,
        "wires": []
    },
    {
        "id": "10565997cee40a35",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "312f051dcff7e6b6"
        ],
        "x": 385,
        "y": 460,
        "wires": []
    },
    {
        "id": "a359aebc43dc478b",
        "type": "debug",
        "z": "8cb1c5cd55e7b8a6",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "1f1d86131f830615",
        "type": "debug",
        "z": "8cb1c5cd55e7b8a6",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 500,
        "wires": []
    },
    {
        "id": "93e429c8a65c519d",
        "type": "debug",
        "z": "8cb1c5cd55e7b8a6",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "f6eee42979577bd1",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "deleteTask",
        "url": "/deleteTask",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 700,
        "wires": [
            [
                "f9e390d75f519b8b"
            ]
        ]
    },
    {
        "id": "923f85e557a7adcf",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.delete()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst index = todo.findIndex(x => x.id == msg.payload.id)\n\nif(!~index){\n    msg.error={\n        message:\"No matching task found with the ID.\"\n    }\n    return [null,msg]\n}\n\ntodo.splice(index,1)\n\nDB.todo = todo\n\nglobal.set(\"DB\",DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 680,
        "wires": [
            [
                "c6eb080e57c76c71"
            ],
            [
                "e9612ac162761d79"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "c6eb080e57c76c71",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 640,
        "y": 680,
        "wires": []
    },
    {
        "id": "f9e390d75f519b8b",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "validation",
        "func": "if(!msg.payload.id){\n    msg.error = {\n        message:\"The task you wanted to delete must have an ID.\"\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 700,
        "wires": [
            [
                "923f85e557a7adcf"
            ],
            [
                "5a9e7156ac61d720"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "e9612ac162761d79",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 595,
        "y": 740,
        "wires": []
    },
    {
        "id": "5a9e7156ac61d720",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 385,
        "y": 740,
        "wires": []
    },
    {
        "id": "fb32b1ff301f68ab",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "complete",
        "url": "/complete",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 840,
        "wires": [
            [
                "b3f677ea3a0d7436"
            ]
        ]
    },
    {
        "id": "b3f677ea3a0d7436",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "validation",
        "func": "if(!msg.payload.id){\n    msg.error = {\n        message:\"The task you wanted to complete must have an ID.\"\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 840,
        "wires": [
            [
                "4ec6ca83e5b5a8ce"
            ],
            [
                "42535bcf00b6ca99"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "4ec6ca83e5b5a8ce",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.complete()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst index = todo.findIndex(x => x.id == msg.payload.id)\n\nif(!~index){\n    msg.error={\n        message:\"No matching task found with the ID.\"\n    }\n    return [null,msg]\n}\n\ntodo[index].done=true;\n\nDB.todo = todo\n\nglobal.set(\"DB\",DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 800,
        "wires": [
            [
                "93461b90535f8913"
            ],
            [
                "adaa3a2c6da233fc"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "93461b90535f8913",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 680,
        "y": 800,
        "wires": []
    },
    {
        "id": "adaa3a2c6da233fc",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 595,
        "y": 880,
        "wires": []
    },
    {
        "id": "42535bcf00b6ca99",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 385,
        "y": 880,
        "wires": []
    },
    {
        "id": "1ddb69c0773e03ca",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "incomplete",
        "url": "/incomplete",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "5b40da4a31813528"
            ]
        ]
    },
    {
        "id": "5b40da4a31813528",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "validation",
        "func": "if(!msg.payload.id){\n    msg.error = {\n        message:\"The task you wanted to complete must have an ID.\"\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 980,
        "wires": [
            [
                "ff07fdfbeb9f31bc"
            ],
            [
                "091d45602778ce5e"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "ff07fdfbeb9f31bc",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.complete()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst index = todo.findIndex(x => x.id == msg.payload.id)\n\nif(!~index){\n    msg.error={\n        message:\"No matching task found with the ID.\"\n    }\n    return [null,msg]\n}\n\ntodo[index].done=false;\n\nDB.todo = todo\n\nglobal.set(\"DB\",DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 940,
        "wires": [
            [
                "eb3bd1455679f58a"
            ],
            [
                "36fab97027d40c64"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "eb3bd1455679f58a",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 680,
        "y": 940,
        "wires": []
    },
    {
        "id": "36fab97027d40c64",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 595,
        "y": 1020,
        "wires": []
    },
    {
        "id": "091d45602778ce5e",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 385,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6319c995a0919296",
        "type": "comment",
        "z": "8cb1c5cd55e7b8a6",
        "name": "Deprecated",
        "info": "",
        "x": 130,
        "y": 640,
        "wires": []
    },
    {
        "id": "36ee2ee5e3d8865a",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "operation",
        "url": "/operationasdf/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1200,
        "wires": [
            [
                "47d8290138bbb8ed"
            ]
        ]
    },
    {
        "id": "47d8290138bbb8ed",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "validation",
        "func": "const typeLookup={\n    deleteTask : \"delete\",\n    complete: \"complete\",\n    incomplete : \"incomplete\",\n    add: \"add\"\n}\n\nif(!Object.keys(typeLookup).includes(msg.req.params.type)){\n    msg.error = {\n        message: `Request Type Error: ${msg.req.params.type}. \\n Unsupported request type. `\n    }\n    return [null,msg]\n}\n\nif(msg.req.params.type == \"add\"){\n    if (!msg.payload.name) {\n        node.error(\"You cannot add a nameless task.\", msg);\n        return;\n    }\n    const now = new Date().getTime();\n    msg.payload.id = now; \n}\n\nif(!msg.payload.id){\n    msg.error = {\n        message: `The task you wanted to ${typeLookup[msg.req.params.type]} must have an ID.`\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1200,
        "wires": [
            [
                "feb06891a3283162"
            ],
            [
                "f0a1fb809bc146a2"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "feb06891a3283162",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.handler()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst index = todo.findIndex(x => x.id == msg.payload.id)\n\nif(!~index){\n    msg.error={\n        message:\"No matching task found with the ID.\"\n    }\n    return [null,msg]\n}\n\nswitch (msg.req.params.type) {\n    case \"add\":\n        todo.push({\n            id: msg.payload.id,\n            name: msg.payload.name,\n            done: false,\n            stamp: {\n                CreatedAt: msg.payload.id,\n                ip: msg.req.ip,\n                username: \"\",\n                email: \"\",\n            }\n        })\n        break;\n    case \"deleteTask\":\n        todo.splice(index,1)\n        break;\n    case \"complete\":\n        todo[index].done=true;\n        break;\n    case \"incomplete\":\n        todo[index].done=false;\n        break;\n    default:\n        \n}\n\n\n\nDB.todo = todo\n\nglobal.set(\"DB\",DB)\n\n/**\n * ToDo DB Şema\n * id :num\n * name :\"\"\n * done:true|false\n * stamp: {\n    *  CreatedAt: sometime,\n    *  ip: IP,\n    *  user:\"\",\n    *  email: \"\",\n * \n * }\n*/\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "27414ddd96659cc5"
            ],
            [
                "2dd20b4d491506a2"
            ]
        ],
        "outputLabels": [
            "Success",
            "Error"
        ]
    },
    {
        "id": "27414ddd96659cc5",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 680,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2dd20b4d491506a2",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 595,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f0a1fb809bc146a2",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 385,
        "y": 1240,
        "wires": []
    },
    {
        "id": "49b070ec7b4905d6",
        "type": "http in",
        "z": "8cb1c5cd55e7b8a6",
        "name": "add",
        "url": "/add",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 1320,
        "wires": [
            [
                "b477b2bcf037fc13"
            ]
        ]
    },
    {
        "id": "13c8d762c253c09e",
        "type": "http response",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 620,
        "y": 1320,
        "wires": []
    },
    {
        "id": "9738fbf514136ba6",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "db.todo.insert()",
        "func": "const DB = global.get(\"DB\")\nlet todo = DB.todo\n\nconst now = new Date().getTime();\ntodo.push({\n    id: now,\n    name:msg.payload.name,\n    done:false,\n    stamp:{\n        CreatedAt:now,\n        ip:msg.req.ip,\n        username:\"\",\n        email:\"\",\n    }\n})\nDB.todo = todo\nglobal.set(\"DB\",DB)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1320,
        "wires": [
            [
                "13c8d762c253c09e"
            ]
        ]
    },
    {
        "id": "b477b2bcf037fc13",
        "type": "function",
        "z": "8cb1c5cd55e7b8a6",
        "name": "validation",
        "func": "if(!msg.payload.name){\n    node.error(\"You cannot add a nameless task.\", msg);\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1320,
        "wires": [
            [
                "9738fbf514136ba6"
            ]
        ]
    },
    {
        "id": "eab5ee6ebd13aec8",
        "type": "catch",
        "z": "8cb1c5cd55e7b8a6",
        "name": "",
        "scope": [
            "b477b2bcf037fc13"
        ],
        "uncaught": false,
        "x": 270,
        "y": 1380,
        "wires": [
            [
                "863b0a0285ecdc3c"
            ]
        ]
    },
    {
        "id": "863b0a0285ecdc3c",
        "type": "link out",
        "z": "8cb1c5cd55e7b8a6",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "6174979e5eaf9458",
            "937d32fbb3959037"
        ],
        "x": 425,
        "y": 1380,
        "wires": []
    },
    {
        "id": "9a7c8b17c2318011",
        "type": "comment",
        "z": "8cb1c5cd55e7b8a6",
        "name": "Deprecated",
        "info": "",
        "x": 110,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c0d2fa8e55a2e5bc",
        "type": "comment",
        "z": "8cb1c5cd55e7b8a6",
        "name": "Deprecated",
        "info": "",
        "x": 110,
        "y": 1260,
        "wires": []
    },
    {
        "id": "ec8ebd72ee6dc3c2",
        "type": "http in",
        "z": "5db8c354f2e727e2",
        "name": "Main UI",
        "url": "/mytasks",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "5043049405f0f263"
            ]
        ]
    },
    {
        "id": "e9e620f6214e4751",
        "type": "http response",
        "z": "5db8c354f2e727e2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 120,
        "wires": []
    },
    {
        "id": "5043049405f0f263",
        "type": "function",
        "z": "5db8c354f2e727e2",
        "name": "db.wodo.find()",
        "func": "const DB = global.get(\"DB\")\nmsg.payload = DB.wodo;\nmsg.payload_json = JSON.stringify(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "e20b075348a9b61e"
            ]
        ]
    },
    {
        "id": "937d32fbb3959037",
        "type": "link in",
        "z": "5db8c354f2e727e2",
        "name": "link in 3",
        "links": [
            "863b0a0285ecdc3c",
            "e9612ac162761d79",
            "5a9e7156ac61d720",
            "120bde15a98516bb",
            "b4551f1736463831",
            "adaa3a2c6da233fc",
            "42535bcf00b6ca99",
            "36fab97027d40c64",
            "091d45602778ce5e",
            "10b4fc56655901f2",
            "81170b9c9fc21b69",
            "2dd20b4d491506a2",
            "f0a1fb809bc146a2",
            "6253d6033a0d4bf4"
        ],
        "x": 145,
        "y": 80,
        "wires": [
            [
                "5043049405f0f263"
            ]
        ]
    },
    {
        "id": "be8271025c9c3bf9",
        "type": "http in",
        "z": "5db8c354f2e727e2",
        "name": "operations",
        "url": "/operations/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "47a13e8de9938ab0"
            ]
        ]
    },
    {
        "id": "47a13e8de9938ab0",
        "type": "function",
        "z": "5db8c354f2e727e2",
        "name": "validation",
        "func": "const typeLookup={\n    deleteTask : {\n        title: \"delete\",\n        rqA: \"id\"\n    },\n    complete : {\n        title: \"complete\",\n        rqA: \"id\"\n    },\n    incomplete : {\n        title: \"incomplete\",\n        rqA: \"id\"\n    }, \n    add : {\n        title: \"add\",\n        rqA: \"name\"\n    },\n    updateTask:{\n        title:\"update\",\n        rqA: \"id\"\n    }\n}\n\n\nif(!Object.keys(typeLookup).includes(msg.req.params.type)){\n    msg.error = {\n        message: `Request Type Error: ${msg.req.params.type}. \\n Unsupported request type. `\n    }\n    return [null,msg]\n}\n\nif(!msg.payload[typeLookup[msg.req.params.type].rqA]){\n    msg.error = {\n        message: `The task you wanted to ${typeLookup[msg.req.params.type].title} must have an/a ${typeLookup[msg.req.params.type].rqA}.`\n    }\n    return [null, msg]\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 300,
        "wires": [
            [
                "ab4e2c5fedc1031d"
            ],
            [
                "81170b9c9fc21b69"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "ab4e2c5fedc1031d",
        "type": "function",
        "z": "5db8c354f2e727e2",
        "name": "db.wodo.handler()",
        "func": "const DB = global.get(\"DB\")\nlet wodo = DB.wodo\n\nconst date = new Date();\nconst now = date.getTime();\nfunction updateTaskStamp(obj){\n    obj.stamp = {\n        CreatedAt: now,\n        ip: msg.req.ip,\n        username: \"\",\n        email: \"\",\n    }\n    obj.date = date.toLocaleDateString()\n    obj.time = date.toLocaleTimeString()\n}\n\nif(msg.req.params.type === 'add'){\n    wodo.push({\n        id: now,\n        name: msg.payload.name,\n        done: false,\n        stamp: {\n            CreatedAt: now,\n            ip: msg.req.ip,\n            username: \"\",\n            email: \"\",\n        },\n        date : date.toLocaleDateString(),\n        time : date.toLocaleTimeString()\n\n        \n    })\n}\nelse{\n    const index = wodo.findIndex(x => x.id == msg.payload.id)\n    if (!~index) {\n        msg.error = {\n            message: \"No matching task found with the ID.\"\n        }\n        return [null, msg]\n    }\n    switch (msg.req.params.type) {\n        case \"deleteTask\":\n            wodo.splice(index, 1)\n            break;\n        case \"complete\":\n            wodo[index].done = true;\n            updateTaskStamp(wodo[index]);\n            break;\n        case \"incomplete\":\n            wodo[index].done = false;\n            updateTaskStamp(wodo[index]);\n            break;\n        case \"updateTask\":\n            if (!msg.payload.new_task_id) {\n                msg.error = {\n                    message: \"New Task ID cannot be empty.\"\n                }\n                return [null, msg]\n            }\n            if (!msg.payload.new_task_name) {\n                msg.error = {\n                    message: \"New Task Name cannot be empty.\"\n                }\n                return [null, msg]\n            }\n            wodo[index].id = msg.payload.new_task_id;\n            wodo[index].name = msg.payload.new_task_name;\n            updateTaskStamp(wodo[index]);\n            msg.payload = { status: \"success\", message: \"Completed successfuly.\" };\n            break;\n        default:\n    }\n}\nDB.wodo = wodo\n\nglobal.set(\"DB\",DB)\n\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "cfa60a01533d2d50"
            ],
            [
                "10b4fc56655901f2"
            ]
        ],
        "outputLabels": [
            "handler",
            "Error"
        ]
    },
    {
        "id": "cfa60a01533d2d50",
        "type": "http response",
        "z": "5db8c354f2e727e2",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/mytasks"
        },
        "x": 740,
        "y": 220,
        "wires": []
    },
    {
        "id": "10b4fc56655901f2",
        "type": "link out",
        "z": "5db8c354f2e727e2",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "937d32fbb3959037"
        ],
        "x": 705,
        "y": 260,
        "wires": []
    },
    {
        "id": "81170b9c9fc21b69",
        "type": "link out",
        "z": "5db8c354f2e727e2",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "937d32fbb3959037"
        ],
        "x": 385,
        "y": 340,
        "wires": []
    },
    {
        "id": "e20b075348a9b61e",
        "type": "template",
        "z": "5db8c354f2e727e2",
        "name": "MainTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/img/pokeball.png\">\n    <link rel=\"stylesheet\" href=\"/css/mycss.css\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <!-- Using CDN for bootstrap for this example to work standalone -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n    <!-- SurveyJS -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/default-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/borderless-light.min.js\"></script>\n    <!-- ... -->\n    <style>\n        .dark-hover{\n            background-color:#212529;\n            color:white;\n        }\n        .dark-hover:hover{\n            background-color:white;\n            color:black;\n        }\n    </style>\n    <script>\n        const taskDataPayload = JSON.parse('{{{payload_json}}}');\n    </script>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\" col col-md-2 offset-md-10\">\n                <button class=\"btn btn-outline-dark mt-5\" id=\"theme-toggle-btn\" style=\"position:fixed; z-index:55;border:0;\"></button>\n            </div>\n            <div class=\"col-md-8 offset-md-2\"\">\n                {{#error}}\n                <div class=\"alert alert-danger mt-5\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/operations/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg mt-5\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Big Man Charizard\" />\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"table-responsive mt-5 border rounded\">\n                    <table class=\"table table-striped table-hover border mb-0\" id=\"task-table\">\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Details</th>\n                                <th style=\"text-align: right;\">Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <!-- \n                                NODE-RED WILL RENDER THE TABLE ROWS HERE \n                                using the Mustache.js template below.\n                            -->\n                            {{#payload}}\n                            <tr>\n                                <td class=\"{{#done}}text-decoration-line-through{{/done}}\">{{name}}</td>\n                                <td><span class=\"badge bg-secondary\"><i class=\"bi bi-calendar2-week\"></i> {{date}},{{time}}</span>\n                                </td>\n                                <td align=\"right\">\n                                    <!-- \n                                            This is the trigger button.\n                                            - It has a CLASS, not an ID.\n                                            - It stores the task's data.\n                                        -->\n                                    <button\n                                            class=\"btn btn-sm btn-outline-secondary options-popover-btn\"\n                                            data-id=\"{{id}}\"\n                                            data-done=\"{{done}}\">\n                                            <i class=\"bi bi-three-dots-vertical\"></i>\n                                        </button>\n                                </td>\n                            </tr>\n                            {{/payload}}\n                            {{^payload}}\n                            <tr>\n                                <td class=\"text-muted\" colspan=\"3\">Henüz Task yok</td>\n                            </tr>\n                            {{/payload}}\n                        </tbody>\n                    </table>\n                </div>\n                <!--  -->\n            </div>\n        </div>\n    </div>\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Update</h1>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"surveyContainer\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n\n    <!-- \n      THE TEMPLATE FOR THE POPOVER\n      This holds the HTML for the popover's content. It's invisible on the page\n      but the script below will use it.\n    -->\n    <template id=\"popover-template\">\n        <div class=\"btn-group\">\n            <form method=\"POST\" style=\"display: contents;\">\n                <!-- The script will put the correct item ID here -->\n                <input type=\"hidden\" name=\"id\" value=\"\" class=\"popover-id-input\" />\n\n                <!-- Group of buttons to show when the task is DONE -->\n                <div class=\"done-buttons\" style=\"display: contents;\">\n                    <button type=\"submit\" formaction=\"/operations/incomplete\" class=\"btn btn-outline-warning\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Mark As Incomplete\"><i class=\"bi bi-x-square\"></i></button>\n                </div>\n\n                <!-- Group of buttons to show when the task is NOT DONE -->\n                <div class=\"not-done-buttons\" style=\"display: contents;\">\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-primary btn-update\" name=\"id\" value=\"\" onclick=\"update_Task(this.value,this)\" data-bs-placement=\"top\" data-bs-title=\"Update\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\"><i class=\"bi bi-pencil\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Set Reminder\"><i class=\"bi bi-bell\"></i></button>\n                    <button type=\"button\" formaction=\"\" class=\"btn btn-outline-info\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delay\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                    <button type=\"submit\" formaction=\"/operations/complete\" class=\"btn btn-outline-success\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Complete Task\"><i class=\"bi bi-check2-square\"></i></button>\n                </div>\n\n                <!-- This button is always shown inside the popover -->\n                <button type=\"submit\" formaction=\"/operations/deleteTask\" class=\"btn btn-outline-danger\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Delete Task\"><i class=\"bi bi-trash3\"></i></button>\n            </form>\n        </div>\n    </template>\n\n    <!-- JS Libraries -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n    <script>\n        // remove popovers\n        \n            \n\n    </script>\n\n    <script>\n        // This script will run in the user's browser AFTER Node-RED has rendered the page.\n        document.addEventListener('DOMContentLoaded', () => {\n            \n            // Get the HTML template for the popover's content\n            const popoverTemplate = document.getElementById('popover-template');\n\n            // Find ALL the buttons that need a popover (which were created by Node-RED)\n            const popoverTriggerList = document.querySelectorAll('.options-popover-btn');\n\n            // Loop through each trigger button\n            popoverTriggerList.forEach(popoverTriggerEl => {\n                \n                // Get the unique data from the button's data-* attributes\n                const itemId = popoverTriggerEl.dataset.id;\n                const isDone = popoverTriggerEl.dataset.done === 'true';\n                // Initialize the Bootstrap Popover for this specific button\n                const popover = new bootstrap.Popover(popoverTriggerEl, {\n                    html: true,\n                    title: 'Options',\n                    sanitize: false,\n                    trigger: 'click manual',\n                    // *** THE FIX IS HERE ***\n                    // Use a function for the content. This function runs EVERY TIME the popover is opened.\n                    content: function () {\n                        // B. Create a FRESH copy of the template's content\n                        const contentElement = popoverTemplate.content.cloneNode(true);\n                        \n                        // C. Modify the copied content\n                        contentElement.querySelector('.popover-id-input').value = itemId;\n                        let updatebtn = contentElement.querySelector('.btn-update');\n                        updatebtn.value = itemId;\n                        const tooltip = new bootstrap.Tooltip(updatebtn);\n\n\n                        // Show or hide the correct set of buttons based on the 'done' status\n                        if (isDone) {\n                            contentElement.querySelector('.not-done-buttons').remove();\n                        } else {\n                            contentElement.querySelector('.done-buttons').remove();\n                        }\n\n                        // D. Return the freshly prepared HTML element for Bootstrap to use\n                        return contentElement;\n                    }\n                });\n                \n\n                // E. Initialize nested tooltips after the popover is shown\n                popoverTriggerEl.addEventListener('shown.bs.popover', () => {\n                    const popoverId = popoverTriggerEl.getAttribute('aria-describedby');\n                    if (popoverId) {\n                        const popoverBody = document.getElementById(popoverId).querySelector('.popover-body');\n                        if (popoverBody) {\n                            const tooltipTriggersInPopover = popoverBody.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n                            [...tooltipTriggersInPopover].map(tooltipEl => new bootstrap.Tooltip(tooltipEl));\n                        }\n                    }\n                });\n            });\n\n            // Initialize any other tooltips on the page\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        });\n    </script>\n\n    <!-- updateHandler -->\n    <script>\n        \n        function update_Task(num,obj){\n            const info = {\n                id : num\n            }\n            const modalupdate = document.getElementById('staticBackdrop');\n            modalupdate.setAttribute('value', num);\n            document.querySelectorAll('.options-popover-btn').forEach(option_button =>{\n                if(option_button.getAttribute(\"aria-describedby\")){\n                    option_button.click();\n                }\n            });\n            // let popoverList = document.querySelectorAll(\".popover\");\n            // popoverList.forEach(popover =>{\n            //     popover.hide();\n            // });\n            let tooltipList = document.querySelectorAll(\".tooltip\");\n            tooltipList.forEach(tooltip =>{\n                tooltip.remove();\n            });\n            let object_in_q = taskDataPayload.find(task => task.id == num);\n            survey.setValue('id',num);\n            survey.setValue('new_task_id',num);\n            survey.setValue('new_task_name',object_in_q.name);\n            if(document.documentElement.getAttribute('data-bs-theme')==='dark'){\n            survey.applyTheme(SurveyTheme.DefaultDark);\n            }else {\n            survey.applyTheme(SurveyTheme.BorderlessLight);\n            };\n            survey.render(document.getElementById(\"surveyContainer\"));\n            \n            \n        };\n        document.addEventListener('DOMContentLoaded', ()=>{\n            document.querySelector('.btn-close').addEventListener('click', ()=>{\n                close_task_update_window();\n            });\n            \n            function close_task_update_window(){\n                survey.clear();\n                \n            };\n        });\n\n        async function sendTaskUpdates(sender){\n\n            const surveyData = sender.data;\n            console.log(\"id \",typeof surveyData.id);\n            console.log(\"new_task_id \",typeof surveyData.new_task_id);\n            console.log(\"new_task_name: \",typeof surveyData.new_task_name);\n\n            const url = '/operations/updateTask';\n            \n            // Use fetch to send a POST request\n            try {\n            const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n            // This header is crucial to tell Node-RED you're sending JSON\n            'Content-Type': 'application/json'\n            },\n            // Convert the JavaScript object to a JSON string for the request body\n            body: JSON.stringify(surveyData)\n            });\n            \n            if (response.ok) {\n                console.log(\"Task updated successfully!\");\n                console.log(response);\n                console.log(response.ok);\n                location.reload();\n\n\n            // Optionally, redirect the user or show a success message\n            // window.location.href = '/success.html';\n            } else {\n                console.error(\"Failed to update task.\");\n            }\n            } catch (error) {\n                console.error(\"Error sending survey data:\", error);\n            };\n            document.querySelector('.btn-close').click();\n        };\n        \n    </script>\n\n    <!-- Dark Mode Light Mode -->\n    <script>\n        const themeToggleButton = document.getElementById('theme-toggle-btn');\n        const htmlElement = document.documentElement; // Gets the <html> element\n\n        // --- PART A: APPLY SAVED THEME ON PAGE LOAD ---\n\n        // This self-executing function applies the theme immediately.\n        (() => {\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            themeToggleButton.innerHTML = savedTheme  === 'dark' ? '<i class=\"bi bi-moon-fill\"></i>' : '<i class=\"bi bi-brightness-high-fill\"></i>'\n            htmlElement.setAttribute('data-bs-theme', savedTheme);\n        })();\n\n\n        // --- PART B: HANDLE THE BUTTON CLICK ---\n        \n        themeToggleButton.addEventListener('click', () => {\n            // Check the current theme and toggle it\n            const currentTheme = htmlElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n            // Set the new theme on the <html> element\n            htmlElement.setAttribute('data-bs-theme', newTheme);\n            if(newTheme ==='dark'){\n                themeToggleButton.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n                themeToggleButton.classList.add('dark-hover');\n            }else{\n                themeToggleButton.classList.remove('dark-hover');\n                themeToggleButton.innerHTML = '<i class=\"bi bi-brightness-high-fill\"></i>'\n            }\n            \n            \n            // Save the new theme to localStorage\n            localStorage.setItem('theme', newTheme);\n        });\n    </script>\n    \n    <script>\n\n        const surveyJson = {\n            pages: [{\n                name: \"PersonalDetails\",\n                elements: [{\n                    name: \"id\", // The name to access the data\n                    type: \"text\", // Can be any input type\n                    visible: false, // This is the key property to hide it,\n                    isRequired:true\n                    },{\n                    type: \"text\",\n                    name: \"new_task_id\",\n                    title: \"Enter New Task ID:\",\n                    \"validators\": [\n                        { \"type\": \"numeric\", \"text\": \"Value must be a number\" }\n                    ]},\n                    {\n                    type: \"text\",\n                    name: \"new_task_name\",\n                    title: \"New Task Name:\"\n                    }]\n            }]\n        };\n            \n        const survey = new Survey.Model(surveyJson);\n        survey.applyTheme(SurveyTheme.DefaultDark);\n        survey.focusFirstQuestionAutomatic = false;\n        survey.clearInvisibleValues = \"none\";\n        survey.onComplete.add(sendTaskUpdates);\n        \n    </script>\n\n</body>\n\n</html>",
        "output": "str",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "e9e620f6214e4751"
            ]
        ]
    },
    {
        "id": "f1ea6d8162a35f0a",
        "type": "crontinject",
        "z": "a85e26e9e901c14b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/1 0 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 0,
        "hasButton": true,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "0bb088aa87bfb34d"
            ]
        ]
    },
    {
        "id": "0bb088aa87bfb34d",
        "type": "debug",
        "z": "a85e26e9e901c14b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 160,
        "wires": []
    },
    {
        "id": "333b12fd745cdd8b",
        "type": "comment",
        "z": "a85e26e9e901c14b",
        "name": "[interval between times]: Every 1 minutes in between 00:00 and 01:00 hours of everyday",
        "info": "### [EN]\nIt injects every 1 minute between 00:00 and 01:00 every day.\n\n### [TR]\nHergün saat 00:00 ile 01:00 arasında 1 dakikada bir enjecte eder.",
        "x": 420,
        "y": 120,
        "wires": []
    },
    {
        "id": "fb7f0ef55e1830c7",
        "type": "crontinject",
        "z": "a85e26e9e901c14b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "onIntervalTime",
        "crontiArgs": "[\"2022-10-20T00:00\",\"2022-10-23T00:00\",\"1\",\"\"]",
        "inputs": 0,
        "hasButton": true,
        "x": 210,
        "y": 260,
        "wires": [
            [
                "c1e62b6c8770c44b"
            ]
        ]
    },
    {
        "id": "c1e62b6c8770c44b",
        "type": "debug",
        "z": "a85e26e9e901c14b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 260,
        "wires": []
    },
    {
        "id": "79bb9ba3352ead8b",
        "type": "comment",
        "z": "a85e26e9e901c14b",
        "name": "[intervals between dates]: Every at day between two dates",
        "info": "### [EN]\nInject to be triggered daily between 2 selected dates.\n\n### [TR]\nSeçilen 2 tarih arasında her gün tetiklenecek şekilde enjeksiyon yap.",
        "x": 330,
        "y": 220,
        "wires": []
    },
    {
        "id": "12aa062e94fb7eb5",
        "type": "comment",
        "z": "a85e26e9e901c14b",
        "name": "14 [msg]: Every at 12:30 clock between april 15th to 25th and may 15th to 25th",
        "info": "### [EN]\nInject at 12:30 between the 15th and 25th of April and the 15th to the 25th of May, to be repeated annually.\n\n### [TR]\nHer yıl tekrarlanacak şekilde, Nisan ayının 15'i ile 25'i arasında ve Mayıs ayının 15'i ile 25'i arasında saat 12:30'da enjeksiyon yap.",
        "x": 350,
        "y": 360,
        "wires": []
    },
    {
        "id": "aecebea1ee21f31b",
        "type": "crontinject",
        "z": "a85e26e9e901c14b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 1,
        "hasButton": false,
        "x": 360,
        "y": 440,
        "wires": [
            [
                "504b663bc909d961"
            ]
        ]
    },
    {
        "id": "8c96dad80802602d",
        "type": "crontinject",
        "z": "a85e26e9e901c14b",
        "name": "Create Schedule",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"crontiMethod\":\"onIntervalTime\",\"crontiArgs\":[\"2022-04-15T09:30:00.000Z\",\"2022-05-25T09:30:00.000Z\"]}",
        "payloadType": "json",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 0,
        "hasButton": true,
        "x": 180,
        "y": 400,
        "wires": [
            [
                "aecebea1ee21f31b"
            ]
        ]
    },
    {
        "id": "4019a4ba77558eea",
        "type": "debug",
        "z": "a85e26e9e901c14b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "c3ccc1957a01ae63",
        "type": "crontinject",
        "z": "a85e26e9e901c14b",
        "name": "Cancel Schedule",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "crontiSchedulePayload",
        "payloadType": "flow",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 0,
        "hasButton": true,
        "x": 180,
        "y": 480,
        "wires": [
            [
                "aecebea1ee21f31b"
            ]
        ]
    },
    {
        "id": "504b663bc909d961",
        "type": "function",
        "z": "a85e26e9e901c14b",
        "name": "save schedule id",
        "func": "if(msg.schedule && !msg.schedule.cancel) {\n    if(msg.schedule.cancel) {\n        // Canceled Schedule\n        /* Silent is gold */\n    } else {\n        // Created Schedule\n        flow.set(\"crontiSchedulePayload\", {\"_id\": msg.schedule.self._id})\n    } \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "4019a4ba77558eea"
            ]
        ]
    }
]